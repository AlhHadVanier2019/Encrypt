import csv
import math
import random
import socket
import threading
import time

import Operators as op

# Global Variable used for communications
socketHolder = socket.socket(socket.AF_INET, socket.SOCK_STREAM)


class AES:
    """
    Creates an aes object which can encrypt and decrypt any message or file given a key using the encrypt
    and decrypt methods.
    """

    # ------INITIALIZE NECESSARY LOOKUP TABLES----------
    # Rijndael S-box
    sbox = ['01100011', '01111100', '01110111', '01111011', '11110010', '01101011', '01101111', '11000101',
            '00110000', '00000001', '01100111', '00101011', '11111110', '11010111', '10101011', '01110110',
            '11001010', '10000010', '11001001', '01111101', '11111010', '01011001', '01000111', '11110000',
            '10101101', '11010100', '10100010', '10101111', '10011100', '10100100', '01110010', '11000000',
            '10110111', '11111101', '10010011', '00100110', '00110110', '00111111', '11110111', '11001100',
            '00110100', '10100101', '11100101', '11110001', '01110001', '11011000', '00110001', '00010101',
            '00000100', '11000111', '00100011', '11000011', '00011000', '10010110', '00000101', '10011010',
            '00000111', '00010010', '10000000', '11100010', '11101011', '00100111', '10110010', '01110101',
            '00001001', '10000011', '00101100', '00011010', '00011011', '01101110', '01011010', '10100000',
            '01010010', '00111011', '11010110', '10110011', '00101001', '11100011', '00101111', '10000100',
            '01010011', '11010001', '00000000', '11101101', '00100000', '11111100', '10110001', '01011011',
            '01101010', '11001011', '10111110', '00111001', '01001010', '01001100', '01011000', '11001111',
            '11010000', '11101111', '10101010', '11111011', '01000011', '01001101', '00110011', '10000101',
            '01000101', '11111001', '00000010', '01111111', '01010000', '00111100', '10011111', '10101000',
            '01010001', '10100011', '01000000', '10001111', '10010010', '10011101', '00111000', '11110101',
            '10111100', '10110110', '11011010', '00100001', '00010000', '11111111', '11110011', '11010010',
            '11001101', '00001100', '00010011', '11101100', '01011111', '10010111', '01000100', '00010111',
            '11000100', '10100111', '01111110', '00111101', '01100100', '01011101', '00011001', '01110011',
            '01100000', '10000001', '01001111', '11011100', '00100010', '00101010', '10010000', '10001000',
            '01000110', '11101110', '10111000', '00010100', '11011110', '01011110', '00001011', '11011011',
            '11100000', '00110010', '00111010', '00001010', '01001001', '00000110', '00100100', '01011100',
            '11000010', '11010011', '10101100', '01100010', '10010001', '10010101', '11100100', '01111001',
            '11100111', '11001000', '00110111', '01101101', '10001101', '11010101', '01001110', '10101001',
            '01101100', '01010110', '11110100', '11101010', '01100101', '01111010', '10101110', '00001000',
            '10111010', '01111000', '00100101', '00101110', '00011100', '10100110', '10110100', '11000110',
            '11101000', '11011101', '01110100', '00011111', '01001011', '10111101', '10001011', '10001010',
            '01110000', '00111110', '10110101', '01100110', '01001000', '00000011', '11110110', '00001110',
            '01100001', '00110101', '01010111', '10111001', '10000110', '11000001', '00011101', '10011110',
            '11100001', '11111000', '10011000', '00010001', '01101001', '11011001', '10001110', '10010100',
            '10011011', '00011110', '10000111', '11101001', '11001110', '01010101', '00101000', '11011111',
            '10001100', '10100001', '10001001', '00001101', '10111111', '11100110', '01000010', '01101000',
            '01000001', '10011001', '00101101', '00001111', '10110000', '01010100', '10111011', '00010110']

    # Galois field multiplication by 2
    mul2 = ['00000000', '00000010', '00000100', '00000110', '00001000', '00001010', '00001100', '00001110',
            '00010000', '00010010', '00010100', '00010110', '00011000', '00011010', '00011100', '00011110',
            '00100000', '00100010', '00100100', '00100110', '00101000', '00101010', '00101100', '00101110',
            '00110000', '00110010', '00110100', '00110110', '00111000', '00111010', '00111100', '00111110',
            '01000000', '01000010', '01000100', '01000110', '01001000', '01001010', '01001100', '01001110',
            '01010000', '01010010', '01010100', '01010110', '01011000', '01011010', '01011100', '01011110',
            '01100000', '01100010', '01100100', '01100110', '01101000', '01101010', '01101100', '01101110',
            '01110000', '01110010', '01110100', '01110110', '01111000', '01111010', '01111100', '01111110',
            '10000000', '10000010', '10000100', '10000110', '10001000', '10001010', '10001100', '10001110',
            '10010000', '10010010', '10010100', '10010110', '10011000', '10011010', '10011100', '10011110',
            '10100000', '10100010', '10100100', '10100110', '10101000', '10101010', '10101100', '10101110',
            '10110000', '10110010', '10110100', '10110110', '10111000', '10111010', '10111100', '10111110',
            '11000000', '11000010', '11000100', '11000110', '11001000', '11001010', '11001100', '11001110',
            '11010000', '11010010', '11010100', '11010110', '11011000', '11011010', '11011100', '11011110',
            '11100000', '11100010', '11100100', '11100110', '11101000', '11101010', '11101100', '11101110',
            '11110000', '11110010', '11110100', '11110110', '11111000', '11111010', '11111100', '11111110',
            '00011011', '00011001', '00011111', '00011101', '00010011', '00010001', '00010111', '00010101',
            '00001011', '00001001', '00001111', '00001101', '00000011', '00000001', '00000111', '00000101',
            '00111011', '00111001', '00111111', '00111101', '00110011', '00110001', '00110111', '00110101',
            '00101011', '00101001', '00101111', '00101101', '00100011', '00100001', '00100111', '00100101',
            '01011011', '01011001', '01011111', '01011101', '01010011', '01010001', '01010111', '01010101',
            '01001011', '01001001', '01001111', '01001101', '01000011', '01000001', '01000111', '01000101',
            '01111011', '01111001', '01111111', '01111101', '01110011', '01110001', '01110111', '01110101',
            '01101011', '01101001', '01101111', '01101101', '01100011', '01100001', '01100111', '01100101',
            '10011011', '10011001', '10011111', '10011101', '10010011', '10010001', '10010111', '10010101',
            '10001011', '10001001', '10001111', '10001101', '10000011', '10000001', '10000111', '10000101',
            '10111011', '10111001', '10111111', '10111101', '10110011', '10110001', '10110111', '10110101',
            '10101011', '10101001', '10101111', '10101101', '10100011', '10100001', '10100111', '10100101',
            '11011011', '11011001', '11011111', '11011101', '11010011', '11010001', '11010111', '11010101',
            '11001011', '11001001', '11001111', '11001101', '11000011', '11000001', '11000111', '11000101',
            '11111011', '11111001', '11111111', '11111101', '11110011', '11110001', '11110111', '11110101',
            '11101011', '11101001', '11101111', '11101101', '11100011', '11100001', '11100111', '11100101']

    # Galois field multiplication by 3
    mul3 = ['00000000', '00000011', '00000110', '00000101', '00001100', '00001111', '00001010', '00001001',
            '00011000', '00011011', '00011110', '00011101', '00010100', '00010111', '00010010', '00010001',
            '00110000', '00110011', '00110110', '00110101', '00111100', '00111111', '00111010', '00111001',
            '00101000', '00101011', '00101110', '00101101', '00100100', '00100111', '00100010', '00100001',
            '01100000', '01100011', '01100110', '01100101', '01101100', '01101111', '01101010', '01101001',
            '01111000', '01111011', '01111110', '01111101', '01110100', '01110111', '01110010', '01110001',
            '01010000', '01010011', '01010110', '01010101', '01011100', '01011111', '01011010', '01011001',
            '01001000', '01001011', '01001110', '01001101', '01000100', '01000111', '01000010', '01000001',
            '11000000', '11000011', '11000110', '11000101', '11001100', '11001111', '11001010', '11001001',
            '11011000', '11011011', '11011110', '11011101', '11010100', '11010111', '11010010', '11010001',
            '11110000', '11110011', '11110110', '11110101', '11111100', '11111111', '11111010', '11111001',
            '11101000', '11101011', '11101110', '11101101', '11100100', '11100111', '11100010', '11100001',
            '10100000', '10100011', '10100110', '10100101', '10101100', '10101111', '10101010', '10101001',
            '10111000', '10111011', '10111110', '10111101', '10110100', '10110111', '10110010', '10110001',
            '10010000', '10010011', '10010110', '10010101', '10011100', '10011111', '10011010', '10011001',
            '10001000', '10001011', '10001110', '10001101', '10000100', '10000111', '10000010', '10000001',
            '10011011', '10011000', '10011101', '10011110', '10010111', '10010100', '10010001', '10010010',
            '10000011', '10000000', '10000101', '10000110', '10001111', '10001100', '10001001', '10001010',
            '10101011', '10101000', '10101101', '10101110', '10100111', '10100100', '10100001', '10100010',
            '10110011', '10110000', '10110101', '10110110', '10111111', '10111100', '10111001', '10111010',
            '11111011', '11111000', '11111101', '11111110', '11110111', '11110100', '11110001', '11110010',
            '11100011', '11100000', '11100101', '11100110', '11101111', '11101100', '11101001', '11101010',
            '11001011', '11001000', '11001101', '11001110', '11000111', '11000100', '11000001', '11000010',
            '11010011', '11010000', '11010101', '11010110', '11011111', '11011100', '11011001', '11011010',
            '01011011', '01011000', '01011101', '01011110', '01010111', '01010100', '01010001', '01010010',
            '01000011', '01000000', '01000101', '01000110', '01001111', '01001100', '01001001', '01001010',
            '01101011', '01101000', '01101101', '01101110', '01100111', '01100100', '01100001', '01100010',
            '01110011', '01110000', '01110101', '01110110', '01111111', '01111100', '01111001', '01111010',
            '00111011', '00111000', '00111101', '00111110', '00110111', '00110100', '00110001', '00110010',
            '00100011', '00100000', '00100101', '00100110', '00101111', '00101100', '00101001', '00101010',
            '00001011', '00001000', '00001101', '00001110', '00000111', '00000100', '00000001', '00000010',
            '00010011', '00010000', '00010101', '00010110', '00011111', '00011100', '00011001', '00011010']

    # RCon Index
    rcon = ['10001101', '00000001', '00000010', '00000100', '00001000', '00010000', '00100000', '01000000',
            '10000000', '00011011', '00110110', '01101100', '11011000', '10101011', '01001101', '10011010',
            '00101111', '01011110', '10111100', '01100011', '11000110', '10010111', '00110101', '01101010',
            '11010100', '10110011', '01111101', '11111010', '11101111', '11000101', '10010001', '00111001',
            '01110010', '11100100', '11010011', '10111101', '01100001', '11000010', '10011111', '00100101',
            '01001010', '10010100', '00110011', '01100110', '11001100', '10000011', '00011101', '00111010',
            '01110100', '11101000', '11001011', '10001101', '00000001', '00000010', '00000100', '00001000',
            '00010000', '00100000', '01000000', '10000000', '00011011', '00110110', '01101100', '11011000',
            '10101011', '01001101', '10011010', '00101111', '01011110', '10111100', '01100011', '11000110',
            '10010111', '00110101', '01101010', '11010100', '10110011', '01111101', '11111010', '11101111',
            '11000101', '10010001', '00111001', '01110010', '11100100', '11010011', '10111101', '01100001',
            '11000010', '10011111', '00100101', '01001010', '10010100', '00110011', '01100110', '11001100',
            '10000011', '00011101', '00111010', '01110100', '11101000', '11001011', '10001101', '00000001',
            '00000010', '00000100', '00001000', '00010000', '00100000', '01000000', '10000000', '00011011',
            '00110110', '01101100', '11011000', '10101011', '01001101', '10011010', '00101111', '01011110',
            '10111100', '01100011', '11000110', '10010111', '00110101', '01101010', '11010100', '10110011',
            '01111101', '11111010', '11101111', '11000101', '10010001', '00111001', '01110010', '11100100',
            '11010011', '10111101', '01100001', '11000010', '10011111', '00100101', '01001010', '10010100',
            '00110011', '01100110', '11001100', '10000011', '00011101', '00111010', '01110100', '11101000',
            '11001011', '10001101', '00000001', '00000010', '00000100', '00001000', '00010000', '00100000',
            '01000000', '10000000', '00011011', '00110110', '01101100', '11011000', '10101011', '01001101',
            '10011010', '00101111', '01011110', '10111100', '01100011', '11000110', '10010111', '00110101',
            '01101010', '11010100', '10110011', '01111101', '11111010', '11101111', '11000101', '10010001',
            '00111001', '01110010', '11100100', '11010011', '10111101', '01100001', '11000010', '10011111',
            '00100101', '01001010', '10010100', '00110011', '01100110', '11001100', '10000011', '00011101',
            '00111010', '01110100', '11101000', '11001011', '10001101', '00000001', '00000010', '00000100',
            '00001000', '00010000', '00100000', '01000000', '10000000', '00011011', '00110110', '01101100',
            '11011000', '10101011', '01001101', '10011010', '00101111', '01011110', '10111100', '01100011',
            '11000110', '10010111', '00110101', '01101010', '11010100', '10110011', '01111101', '11111010',
            '11101111', '11000101', '10010001', '00111001', '01110010', '11100100', '11010011', '10111101',
            '01100001', '11000010', '10011111', '00100101', '01001010', '10010100', '00110011', '01100110',
            '11001100', '10000011', '00011101', '00111010', '01110100', '11101000', '11001011', '10001101']

    # -------INVERSE LOOKUP TABLES FOR DECRYPTION ----------
    # Inverse S-Box
    inv_sbox = ['01010010', '00001001', '01101010', '11010101', '00110000', '00110110', '10100101', '00111000',
                '10111111', '01000000', '10100011', '10011110', '10000001', '11110011', '11010111', '11111011',
                '01111100', '11100011', '00111001', '10000010', '10011011', '00101111', '11111111', '10000111',
                '00110100', '10001110', '01000011', '01000100', '11000100', '11011110', '11101001', '11001011',
                '01010100', '01111011', '10010100', '00110010', '10100110', '11000010', '00100011', '00111101',
                '11101110', '01001100', '10010101', '00001011', '01000010', '11111010', '11000011', '01001110',
                '00001000', '00101110', '10100001', '01100110', '00101000', '11011001', '00100100', '10110010',
                '01110110', '01011011', '10100010', '01001001', '01101101', '10001011', '11010001', '00100101',
                '01110010', '11111000', '11110110', '01100100', '10000110', '01101000', '10011000', '00010110',
                '11010100', '10100100', '01011100', '11001100', '01011101', '01100101', '10110110', '10010010',
                '01101100', '01110000', '01001000', '01010000', '11111101', '11101101', '10111001', '11011010',
                '01011110', '00010101', '01000110', '01010111', '10100111', '10001101', '10011101', '10000100',
                '10010000', '11011000', '10101011', '00000000', '10001100', '10111100', '11010011', '00001010',
                '11110111', '11100100', '01011000', '00000101', '10111000', '10110011', '01000101', '00000110',
                '11010000', '00101100', '00011110', '10001111', '11001010', '00111111', '00001111', '00000010',
                '11000001', '10101111', '10111101', '00000011', '00000001', '00010011', '10001010', '01101011',
                '00111010', '10010001', '00010001', '01000001', '01001111', '01100111', '11011100', '11101010',
                '10010111', '11110010', '11001111', '11001110', '11110000', '10110100', '11100110', '01110011',
                '10010110', '10101100', '01110100', '00100010', '11100111', '10101101', '00110101', '10000101',
                '11100010', '11111001', '00110111', '11101000', '00011100', '01110101', '11011111', '01101110',
                '01000111', '11110001', '00011010', '01110001', '00011101', '00101001', '11000101', '10001001',
                '01101111', '10110111', '01100010', '00001110', '10101010', '00011000', '10111110', '00011011',
                '11111100', '01010110', '00111110', '01001011', '11000110', '11010010', '01111001', '00100000',
                '10011010', '11011011', '11000000', '11111110', '01111000', '11001101', '01011010', '11110100',
                '00011111', '11011101', '10101000', '00110011', '10001000', '00000111', '11000111', '00110001',
                '10110001', '00010010', '00010000', '01011001', '00100111', '10000000', '11101100', '01011111',
                '01100000', '01010001', '01111111', '10101001', '00011001', '10110101', '01001010', '00001101',
                '00101101', '11100101', '01111010', '10011111', '10010011', '11001001', '10011100', '11101111',
                '10100000', '11100000', '00111011', '01001101', '10101110', '00101010', '11110101', '10110000',
                '11001000', '11101011', '10111011', '00111100', '10000011', '01010011', '10011001', '01100001',
                '00010111', '00101011', '00000100', '01111110', '10111010', '01110111', '11010110', '00100110',
                '11100001', '01101001', '00010100', '01100011', '01010101', '00100001', '00001100', '01111101']

    # Multiplication by 9
    mul9 = ['00000000', '00001001', '00010010', '00011011', '00100100', '00101101', '00110110', '00111111',
            '01001000', '01000001', '01011010', '01010011', '01101100', '01100101', '01111110', '01110111',
            '10010000', '10011001', '10000010', '10001011', '10110100', '10111101', '10100110', '10101111',
            '11011000', '11010001', '11001010', '11000011', '11111100', '11110101', '11101110', '11100111',
            '00111011', '00110010', '00101001', '00100000', '00011111', '00010110', '00001101', '00000100',
            '01110011', '01111010', '01100001', '01101000', '01010111', '01011110', '01000101', '01001100',
            '10101011', '10100010', '10111001', '10110000', '10001111', '10000110', '10011101', '10010100',
            '11100011', '11101010', '11110001', '11111000', '11000111', '11001110', '11010101', '11011100',
            '01110110', '01111111', '01100100', '01101101', '01010010', '01011011', '01000000', '01001001',
            '00111110', '00110111', '00101100', '00100101', '00011010', '00010011', '00001000', '00000001',
            '11100110', '11101111', '11110100', '11111101', '11000010', '11001011', '11010000', '11011001',
            '10101110', '10100111', '10111100', '10110101', '10001010', '10000011', '10011000', '10010001',
            '01001101', '01000100', '01011111', '01010110', '01101001', '01100000', '01111011', '01110010',
            '00000101', '00001100', '00010111', '00011110', '00100001', '00101000', '00110011', '00111010',
            '11011101', '11010100', '11001111', '11000110', '11111001', '11110000', '11101011', '11100010',
            '10010101', '10011100', '10000111', '10001110', '10110001', '10111000', '10100011', '10101010',
            '11101100', '11100101', '11111110', '11110111', '11001000', '11000001', '11011010', '11010011',
            '10100100', '10101101', '10110110', '10111111', '10000000', '10001001', '10010010', '10011011',
            '01111100', '01110101', '01101110', '01100111', '01011000', '01010001', '01001010', '01000011',
            '00110100', '00111101', '00100110', '00101111', '00010000', '00011001', '00000010', '00001011',
            '11010111', '11011110', '11000101', '11001100', '11110011', '11111010', '11100001', '11101000',
            '10011111', '10010110', '10001101', '10000100', '10111011', '10110010', '10101001', '10100000',
            '01000111', '01001110', '01010101', '01011100', '01100011', '01101010', '01110001', '01111000',
            '00001111', '00000110', '00011101', '00010100', '00101011', '00100010', '00111001', '00110000',
            '10011010', '10010011', '10001000', '10000001', '10111110', '10110111', '10101100', '10100101',
            '11010010', '11011011', '11000000', '11001001', '11110110', '11111111', '11100100', '11101101',
            '00001010', '00000011', '00011000', '00010001', '00101110', '00100111', '00111100', '00110101',
            '01000010', '01001011', '01010000', '01011001', '01100110', '01101111', '01110100', '01111101',
            '10100001', '10101000', '10110011', '10111010', '10000101', '10001100', '10010111', '10011110',
            '11101001', '11100000', '11111011', '11110010', '11001101', '11000100', '11011111', '11010110',
            '00110001', '00111000', '00100011', '00101010', '00010101', '00011100', '00000111', '00001110',
            '01111001', '01110000', '01101011', '01100010', '01011101', '01010100', '01001111', '01000110']

    # Multiplication by 11
    mul11 = ['00000000', '00001011', '00010110', '00011101', '00101100', '00100111', '00111010', '00110001',
             '01011000', '01010011', '01001110', '01000101', '01110100', '01111111', '01100010', '01101001',
             '10110000', '10111011', '10100110', '10101101', '10011100', '10010111', '10001010', '10000001',
             '11101000', '11100011', '11111110', '11110101', '11000100', '11001111', '11010010', '11011001',
             '01111011', '01110000', '01101101', '01100110', '01010111', '01011100', '01000001', '01001010',
             '00100011', '00101000', '00110101', '00111110', '00001111', '00000100', '00011001', '00010010',
             '11001011', '11000000', '11011101', '11010110', '11100111', '11101100', '11110001', '11111010',
             '10010011', '10011000', '10000101', '10001110', '10111111', '10110100', '10101001', '10100010',
             '11110110', '11111101', '11100000', '11101011', '11011010', '11010001', '11001100', '11000111',
             '10101110', '10100101', '10111000', '10110011', '10000010', '10001001', '10010100', '10011111',
             '01000110', '01001101', '01010000', '01011011', '01101010', '01100001', '01111100', '01110111',
             '00011110', '00010101', '00001000', '00000011', '00110010', '00111001', '00100100', '00101111',
             '10001101', '10000110', '10011011', '10010000', '10100001', '10101010', '10110111', '10111100',
             '11010101', '11011110', '11000011', '11001000', '11111001', '11110010', '11101111', '11100100',
             '00111101', '00110110', '00101011', '00100000', '00010001', '00011010', '00000111', '00001100',
             '01100101', '01101110', '01110011', '01111000', '01001001', '01000010', '01011111', '01010100',
             '11110111', '11111100', '11100001', '11101010', '11011011', '11010000', '11001101', '11000110',
             '10101111', '10100100', '10111001', '10110010', '10000011', '10001000', '10010101', '10011110',
             '01000111', '01001100', '01010001', '01011010', '01101011', '01100000', '01111101', '01110110',
             '00011111', '00010100', '00001001', '00000010', '00110011', '00111000', '00100101', '00101110',
             '10001100', '10000111', '10011010', '10010001', '10100000', '10101011', '10110110', '10111101',
             '11010100', '11011111', '11000010', '11001001', '11111000', '11110011', '11101110', '11100101',
             '00111100', '00110111', '00101010', '00100001', '00010000', '00011011', '00000110', '00001101',
             '01100100', '01101111', '01110010', '01111001', '01001000', '01000011', '01011110', '01010101',
             '00000001', '00001010', '00010111', '00011100', '00101101', '00100110', '00111011', '00110000',
             '01011001', '01010010', '01001111', '01000100', '01110101', '01111110', '01100011', '01101000',
             '10110001', '10111010', '10100111', '10101100', '10011101', '10010110', '10001011', '10000000',
             '11101001', '11100010', '11111111', '11110100', '11000101', '11001110', '11010011', '11011000',
             '01111010', '01110001', '01101100', '01100111', '01010110', '01011101', '01000000', '01001011',
             '00100010', '00101001', '00110100', '00111111', '00001110', '00000101', '00011000', '00010011',
             '11001010', '11000001', '11011100', '11010111', '11100110', '11101101', '11110000', '11111011',
             '10010010', '10011001', '10000100', '10001111', '10111110', '10110101', '10101000', '10100011']

    # Mutiplication by 13
    mul13 = ['00000000', '00001101', '00011010', '00010111', '00110100', '00111001', '00101110', '00100011',
             '01101000', '01100101', '01110010', '01111111', '01011100', '01010001', '01000110', '01001011',
             '11010000', '11011101', '11001010', '11000111', '11100100', '11101001', '11111110', '11110011',
             '10111000', '10110101', '10100010', '10101111', '10001100', '10000001', '10010110', '10011011',
             '10111011', '10110110', '10100001', '10101100', '10001111', '10000010', '10010101', '10011000',
             '11010011', '11011110', '11001001', '11000100', '11100111', '11101010', '11111101', '11110000',
             '01101011', '01100110', '01110001', '01111100', '01011111', '01010010', '01000101', '01001000',
             '00000011', '00001110', '00011001', '00010100', '00110111', '00111010', '00101101', '00100000',
             '01101101', '01100000', '01110111', '01111010', '01011001', '01010100', '01000011', '01001110',
             '00000101', '00001000', '00011111', '00010010', '00110001', '00111100', '00101011', '00100110',
             '10111101', '10110000', '10100111', '10101010', '10001001', '10000100', '10010011', '10011110',
             '11010101', '11011000', '11001111', '11000010', '11100001', '11101100', '11111011', '11110110',
             '11010110', '11011011', '11001100', '11000001', '11100010', '11101111', '11111000', '11110101',
             '10111110', '10110011', '10100100', '10101001', '10001010', '10000111', '10010000', '10011101',
             '00000110', '00001011', '00011100', '00010001', '00110010', '00111111', '00101000', '00100101',
             '01101110', '01100011', '01110100', '01111001', '01011010', '01010111', '01000000', '01001101',
             '11011010', '11010111', '11000000', '11001101', '11101110', '11100011', '11110100', '11111001',
             '10110010', '10111111', '10101000', '10100101', '10000110', '10001011', '10011100', '10010001',
             '00001010', '00000111', '00010000', '00011101', '00111110', '00110011', '00100100', '00101001',
             '01100010', '01101111', '01111000', '01110101', '01010110', '01011011', '01001100', '01000001',
             '01100001', '01101100', '01111011', '01110110', '01010101', '01011000', '01001111', '01000010',
             '00001001', '00000100', '00010011', '00011110', '00111101', '00110000', '00100111', '00101010',
             '10110001', '10111100', '10101011', '10100110', '10000101', '10001000', '10011111', '10010010',
             '11011001', '11010100', '11000011', '11001110', '11101101', '11100000', '11110111', '11111010',
             '10110111', '10111010', '10101101', '10100000', '10000011', '10001110', '10011001', '10010100',
             '11011111', '11010010', '11000101', '11001000', '11101011', '11100110', '11110001', '11111100',
             '01100111', '01101010', '01111101', '01110000', '01010011', '01011110', '01001001', '01000100',
             '00001111', '00000010', '00010101', '00011000', '00111011', '00110110', '00100001', '00101100',
             '00001100', '00000001', '00010110', '00011011', '00111000', '00110101', '00100010', '00101111',
             '01100100', '01101001', '01111110', '01110011', '01010000', '01011101', '01001010', '01000111',
             '11011100', '11010001', '11000110', '11001011', '11101000', '11100101', '11110010', '11111111',
             '10110100', '10111001', '10101110', '10100011', '10000000', '10001101', '10011010', '10010111']

    # Multiplication by 14
    mul14 = ['00000000', '00001110', '00011100', '00010010', '00111000', '00110110', '00100100', '00101010',
             '01110000', '01111110', '01101100', '01100010', '01001000', '01000110', '01010100', '01011010',
             '11100000', '11101110', '11111100', '11110010', '11011000', '11010110', '11000100', '11001010',
             '10010000', '10011110', '10001100', '10000010', '10101000', '10100110', '10110100', '10111010',
             '11011011', '11010101', '11000111', '11001001', '11100011', '11101101', '11111111', '11110001',
             '10101011', '10100101', '10110111', '10111001', '10010011', '10011101', '10001111', '10000001',
             '00111011', '00110101', '00100111', '00101001', '00000011', '00001101', '00011111', '00010001',
             '01001011', '01000101', '01010111', '01011001', '01110011', '01111101', '01101111', '01100001',
             '10101101', '10100011', '10110001', '10111111', '10010101', '10011011', '10001001', '10000111',
             '11011101', '11010011', '11000001', '11001111', '11100101', '11101011', '11111001', '11110111',
             '01001101', '01000011', '01010001', '01011111', '01110101', '01111011', '01101001', '01100111',
             '00111101', '00110011', '00100001', '00101111', '00000101', '00001011', '00011001', '00010111',
             '01110110', '01111000', '01101010', '01100100', '01001110', '01000000', '01010010', '01011100',
             '00000110', '00001000', '00011010', '00010100', '00111110', '00110000', '00100010', '00101100',
             '10010110', '10011000', '10001010', '10000100', '10101110', '10100000', '10110010', '10111100',
             '11100110', '11101000', '11111010', '11110100', '11011110', '11010000', '11000010', '11001100',
             '01000001', '01001111', '01011101', '01010011', '01111001', '01110111', '01100101', '01101011',
             '00110001', '00111111', '00101101', '00100011', '00001001', '00000111', '00010101', '00011011',
             '10100001', '10101111', '10111101', '10110011', '10011001', '10010111', '10000101', '10001011',
             '11010001', '11011111', '11001101', '11000011', '11101001', '11100111', '11110101', '11111011',
             '10011010', '10010100', '10000110', '10001000', '10100010', '10101100', '10111110', '10110000',
             '11101010', '11100100', '11110110', '11111000', '11010010', '11011100', '11001110', '11000000',
             '01111010', '01110100', '01100110', '01101000', '01000010', '01001100', '01011110', '01010000',
             '00001010', '00000100', '00010110', '00011000', '00110010', '00111100', '00101110', '00100000',
             '11101100', '11100010', '11110000', '11111110', '11010100', '11011010', '11001000', '11000110',
             '10011100', '10010010', '10000000', '10001110', '10100100', '10101010', '10111000', '10110110',
             '00001100', '00000010', '00010000', '00011110', '00110100', '00111010', '00101000', '00100110',
             '01111100', '01110010', '01100000', '01101110', '01000100', '01001010', '01011000', '01010110',
             '00110111', '00111001', '00101011', '00100101', '00001111', '00000001', '00010011', '00011101',
             '01000111', '01001001', '01011011', '01010101', '01111111', '01110001', '01100011', '01101101',
             '11010111', '11011001', '11001011', '11000101', '11101111', '11100001', '11110011', '11111101',
             '10100111', '10101001', '10111011', '10110101', '10011111', '10010001', '10000011', '10001101']

    def __init__(self, plainkey):
        """
        This init method takes the plain key and manipulates into a byte array used in encryption and decryption
        :param plainkey: This is the plainkey that the user enters. This object will use this key for all
                         encryption and decryption.
        """
        self.key = self.getkey(plainkey)
        self.key = self.keyexpansion(self.key)

    @staticmethod
    def keyexpansioncore(byte, index):
        """
        :param byte: An array of length 4 with a byte in each index
        :param index: This is an index used during the rcon step
        :return: Returns a modified version of the param byte
        """
        # Rotate Left
        temp = [0, 0, 0, 0]
        temp[0] = byte[1]
        temp[1] = byte[2]
        temp[2] = byte[3]
        temp[3] = byte[0]

        # Substitute using the S-box. Converts the binary to an integer and funds its substitute in the sbox
        temp[0] = AES.sbox[op.bintoint(temp[0])]
        temp[1] = AES.sbox[op.bintoint(temp[1])]
        temp[2] = AES.sbox[op.bintoint(temp[2])]
        temp[3] = AES.sbox[op.bintoint(temp[3])]

        # RCon
        temp[0] = op.bitxor(temp[0], AES.rcon[index])

        return temp

    def keyexpansion(self, inputkey):
        """
        :param inputkey: An array of length 16 with a byte in each index
        :return: This function returns an array of length 176 with a byte in each index, the expanded key
        """
        # Copies the input key to the expanded key
        expandedkey = inputkey

        # Variables
        bytesgenerated = 16  # The original key is 128 bits or 16 bytes which is what we start with
        rconiteration = 1  # Rcon iteration begins at 1
        temp = [0, 0, 0, 0]  # Temporary storage for bytes

        while bytesgenerated < 176:
            # Read the last 4 bytes into the core / temp array
            for j in range(4):
                temp[j] = expandedkey[j + bytesgenerated - 4]

            if bytesgenerated % 16 == 0:
                temp = self.keyexpansioncore(temp, rconiteration)
                rconiteration += 1

            for a in range(4):
                expandedkey.append(op.bitxor(expandedkey[bytesgenerated - 16], temp[a]))
                bytesgenerated += 1

        return expandedkey

    @staticmethod
    def subbytes(state):
        """
        :param state: This is an array of length 16 with 1 byte in each index
        :return: Returns an array with each index of state substituted with it's match in the Rigndael S-box
        """

        newstate = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        for i in range(16):
            integer = op.bintoint(state[i])
            newstate[i] = AES.sbox[integer]

        return newstate

    @staticmethod
    def inv_subbytes(state):
        """
        :param state: This is an array of length 16 with 1 byte in each index
        :return: Returns an array with each index of state substituted with it's match in the Rigndael inverse S-box
        """

        newstate = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        for i in range(16):
            integer = op.bintoint(state[i])
            newstate[i] = AES.inv_sbox[integer]

        return newstate

    @staticmethod
    def shiftrows(state):
        """
        :param state: This is an array of length 16 with 1 byte in each index
        :return: returns the array shifted a specific way.
        """

        """This operation imagines the array of length 16 as a 4x4 grid
        0 4 8 12
        1 5 9 13
        2 6 10 14
        3 6 11 15
        The first row is not rotated.
        The second row is rotated left once.
        The third row is rotated left twice.
        The fourth row is rotated left three times.
        Doing these rotations produces this mapping of the
        original grid to the new grid.
        """

        temp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

        temp[0] = state[0]
        temp[1] = state[5]
        temp[2] = state[10]
        temp[3] = state[15]

        temp[4] = state[4]
        temp[5] = state[9]
        temp[6] = state[14]
        temp[7] = state[3]

        temp[8] = state[8]
        temp[9] = state[13]
        temp[10] = state[2]
        temp[11] = state[7]

        temp[12] = state[12]
        temp[13] = state[1]
        temp[14] = state[6]
        temp[15] = state[11]

        return temp

    @staticmethod
    def inv_shiftrows(state):
        """
        :param state: This is an array of length 16 with 1 byte in each index
        :return: returns the array shifted a specific way.
        """

        """This operation imagines the array of length 16 as a 4x4 grid
        0 4 8 12
        1 5 9 13
        2 6 10 14
        3 6 11 15
        The first row is not rotated.
        The second row is rotated right once.
        The third row is rotated right twice.
        The fourth row is rotated right three times.
        Doing these rotations produces this mapping of the
        original grid to the new grid.
        Notice that the indexes of the arrays are swapped from the shiftrows method
        """

        temp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

        temp[0] = state[0]
        temp[5] = state[1]
        temp[10] = state[2]
        temp[15] = state[3]

        temp[4] = state[4]
        temp[9] = state[5]
        temp[14] = state[6]
        temp[3] = state[7]

        temp[8] = state[8]
        temp[13] = state[9]
        temp[2] = state[10]
        temp[7] = state[11]

        temp[12] = state[12]
        temp[1] = state[13]
        temp[6] = state[14]
        temp[11] = state[15]

        return temp

    @staticmethod
    def mixcolumns(state):
        """
        :param state: An array of length 16 with a byte in each index
        :return: returns an array of length 16 with a byte in each index
        """

        """ 
        To calculate the new array, this step finds every dot product of 2 matrix's. The first matrix is the state
        and the second one is a predetermined one.
        These are the 2 matrix's:
        s s s s     2 3 1 1
        s s s s     1 2 3 1
        s s s s     1 1 2 3
        s s s s     3 1 1 2
        in the new state, p:
        p(0) = (s(0) * 2) + (s(1) * 3) + (s(2) * 1) + (s(2) * 1)
        p(1) = (s(1) * 2) + (s(2) * 3) + (s(3) * 1) + (s(0) * 1)
        ....
        However unlike a regular dot product, addition is XOR because we are treating each byte as a galois field
        GF(2^8). In this case addition is the same as an XOR operation. 
        And instead of regular multiplication, we use a lookup table. Simply, this is to keep the result within 
        byte.
        """

        tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

        tmp[0] = op.bitxor(AES.mul2[op.bintoint(state[0])], AES.mul3[op.bintoint(state[1])], state[2], state[3])
        tmp[1] = op.bitxor(AES.mul2[op.bintoint(state[1])], AES.mul3[op.bintoint(state[2])], state[3], state[0])
        tmp[2] = op.bitxor(AES.mul2[op.bintoint(state[2])], AES.mul3[op.bintoint(state[3])], state[0], state[1])
        tmp[3] = op.bitxor(AES.mul2[op.bintoint(state[3])], AES.mul3[op.bintoint(state[0])], state[1], state[2])

        tmp[4] = op.bitxor(AES.mul2[op.bintoint(state[4])], AES.mul3[op.bintoint(state[5])], state[6], state[7])
        tmp[5] = op.bitxor(AES.mul2[op.bintoint(state[5])], AES.mul3[op.bintoint(state[6])], state[7], state[4])
        tmp[6] = op.bitxor(AES.mul2[op.bintoint(state[6])], AES.mul3[op.bintoint(state[7])], state[4], state[5])
        tmp[7] = op.bitxor(AES.mul2[op.bintoint(state[7])], AES.mul3[op.bintoint(state[4])], state[5], state[6])

        tmp[8] = op.bitxor(AES.mul2[op.bintoint(state[8])], AES.mul3[op.bintoint(state[9])], state[10], state[11])
        tmp[9] = op.bitxor(AES.mul2[op.bintoint(state[9])], AES.mul3[op.bintoint(state[10])], state[11], state[8])
        tmp[10] = op.bitxor(AES.mul2[op.bintoint(state[10])], AES.mul3[op.bintoint(state[11])], state[8], state[9])
        tmp[11] = op.bitxor(AES.mul2[op.bintoint(state[11])], AES.mul3[op.bintoint(state[8])], state[9], state[10])

        tmp[12] = op.bitxor(AES.mul2[op.bintoint(state[12])], AES.mul3[op.bintoint(state[13])], state[14],
                            state[15])
        tmp[13] = op.bitxor(AES.mul2[op.bintoint(state[13])], AES.mul3[op.bintoint(state[14])], state[15],
                            state[12])
        tmp[14] = op.bitxor(AES.mul2[op.bintoint(state[14])], AES.mul3[op.bintoint(state[15])], state[12],
                            state[13])
        tmp[15] = op.bitxor(AES.mul2[op.bintoint(state[15])], AES.mul3[op.bintoint(state[12])], state[13],
                            state[14])

        return tmp

    @staticmethod
    def inv_mixcolumns(state):
        """
        :param state: An array of length 16 with a byte in each index
        :return: returns an array of length 16 with a byte in each index
        """

        """ 
        To calculate the new array, this step finds every dot product of 2 matrix's. The first matrix is the state
        and the second one is a predetermined one.
        These are the 2 matrix's:
        s s s s     14 11 13 09
        s s s s     09 14 11 13
        s s s s     13 09 14 11
        s s s s     11 13 09 14
        This is the exact same as regular mixcolumns except the predetermined matrix is different.
        """
        tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

        tmp[0] = op.bitxor(AES.mul14[op.bintoint(state[0])], AES.mul11[op.bintoint(state[1])],
                           AES.mul13[op.bintoint(state[2])], AES.mul9[op.bintoint(state[3])])

        tmp[1] = op.bitxor(AES.mul14[op.bintoint(state[1])], AES.mul11[op.bintoint(state[2])],
                           AES.mul13[op.bintoint(state[3])], AES.mul9[op.bintoint(state[0])])

        tmp[2] = op.bitxor(AES.mul14[op.bintoint(state[2])], AES.mul11[op.bintoint(state[3])],
                           AES.mul13[op.bintoint(state[0])], AES.mul9[op.bintoint(state[1])])

        tmp[3] = op.bitxor(AES.mul14[op.bintoint(state[3])], AES.mul11[op.bintoint(state[0])],
                           AES.mul13[op.bintoint(state[1])], AES.mul9[op.bintoint(state[2])])

        tmp[4] = op.bitxor(AES.mul14[op.bintoint(state[4])], AES.mul11[op.bintoint(state[5])],
                           AES.mul13[op.bintoint(state[6])], AES.mul9[op.bintoint(state[7])])

        tmp[5] = op.bitxor(AES.mul14[op.bintoint(state[5])], AES.mul11[op.bintoint(state[6])],
                           AES.mul13[op.bintoint(state[7])], AES.mul9[op.bintoint(state[4])])

        tmp[6] = op.bitxor(AES.mul14[op.bintoint(state[6])], AES.mul11[op.bintoint(state[7])],
                           AES.mul13[op.bintoint(state[4])], AES.mul9[op.bintoint(state[5])])

        tmp[7] = op.bitxor(AES.mul14[op.bintoint(state[7])], AES.mul11[op.bintoint(state[4])],
                           AES.mul13[op.bintoint(state[5])], AES.mul9[op.bintoint(state[6])])

        tmp[8] = op.bitxor(AES.mul14[op.bintoint(state[8])], AES.mul11[op.bintoint(state[9])],
                           AES.mul13[op.bintoint(state[10])], AES.mul9[op.bintoint(state[11])])

        tmp[9] = op.bitxor(AES.mul14[op.bintoint(state[9])], AES.mul11[op.bintoint(state[10])],
                           AES.mul13[op.bintoint(state[11])], AES.mul9[op.bintoint(state[8])])

        tmp[10] = op.bitxor(AES.mul14[op.bintoint(state[10])], AES.mul11[op.bintoint(state[11])],
                            AES.mul13[op.bintoint(state[8])], AES.mul9[op.bintoint(state[9])])

        tmp[11] = op.bitxor(AES.mul14[op.bintoint(state[11])], AES.mul11[op.bintoint(state[8])],
                            AES.mul13[op.bintoint(state[9])], AES.mul9[op.bintoint(state[10])])

        tmp[12] = op.bitxor(AES.mul14[op.bintoint(state[12])], AES.mul11[op.bintoint(state[13])],
                            AES.mul13[op.bintoint(state[14])], AES.mul9[op.bintoint(state[15])])

        tmp[13] = op.bitxor(AES.mul14[op.bintoint(state[13])], AES.mul11[op.bintoint(state[14])],
                            AES.mul13[op.bintoint(state[15])], AES.mul9[op.bintoint(state[12])])

        tmp[14] = op.bitxor(AES.mul14[op.bintoint(state[14])], AES.mul11[op.bintoint(state[15])],
                            AES.mul13[op.bintoint(state[12])], AES.mul9[op.bintoint(state[13])])

        tmp[15] = op.bitxor(AES.mul14[op.bintoint(state[15])], AES.mul11[op.bintoint(state[12])],
                            AES.mul13[op.bintoint(state[13])], AES.mul9[op.bintoint(state[14])])

        return tmp

    @staticmethod
    def addroundkey(state, roundkey):
        """
        :param state: This is an array of length 16 with 1 byte in each index.
        :param roundkey: This is another array of length 16 with a byte in each index.
        :return: Returns an array with each index of state added with each index roundkey as galois fields.
                 This is the same as the XOR operation.
        """

        newstate = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        for i in range(16):
            newstate[i] = op.bitxor(state[i], roundkey[i])

        return newstate

    @staticmethod
    def getkey(key):
        """
        :param key: A key in plaintext or list of hex values. Length 16
        :return: Returns the key but formatted as an array of length 16 with a byte in each index.
        This function basically returns the key in binary as an array.
        """
        keytype = str(type(key))
        keylength = len(key)
        newkey = []

        if keytype == "<class 'list'>":
            for i in range(16):
                if i < keylength:
                    newkey.append(op.hextobin(key[i]))
                else:
                    newkey.append("00000000")

        elif keytype == "<class 'str'>":
            for i in range(16):
                if i < keylength:
                    newkey.append(op.stringtobin(key[i]))
                else:
                    newkey.append("00000000")
        else:
            print("Key Type is Invalid. Must be string or list of hex valus. eg. ['4f', '2a', '0b'.....]")
            print("Key used will be all null")
            for i in range(16):
                newkey.append("00000000")

        return newkey

    def encrypt(self, message, message_type, output_type="hex"):
        """
        :param message: The message to be encrypted. Either a file or string
        :param message_type: The type of the message. 'string' or 'file'
        :param output_type: The type of the output. 'hex' or 'string' or 'bytes'
        :return: Returns the encrypted message
        """

        numofrounds = 9
        proceed = True  # This variable will monitor if all the parameters are correct.

        # ------------This section gets a byte array from the message------------------------------------
        # Get the byte array
        if message_type == "file":
            message_bytes = op.getbytearray(message)

        elif message_type == "string":
            message_bytes = []
            for i in range(len(message)):
                message_bytes.append(op.inttobin(ord(message[i])))
        else:
            print("MESSSAGE TYPE IS INVALID. CHOOSE 'string' OR 'file'.")
            proceed = False

        # Check to make sure the message is a string
        if str(type(message)) != "<class 'str'>":
            proceed = False
            print("The message must be a string")

        # This section initializes the encrypted message as either a list or a string
        # depending on the output type
        if output_type == "hex" or output_type == "string":
            encryptedmessage = ""
        elif output_type == "bytes":
            encryptedmessage = []
        else:
            proceed = False
            print("OUTPUT TYPE IS INVALID. CHOOSE 'hex' or 'string' or 'bytes'.")

        # --------------------------------------------------------------------------------------------------------------
        if proceed:
            # Pad the byte array
            while len(message_bytes) % 16 != 0:
                message_bytes.append("00000000")

            loops = len(message_bytes) // 16

            for k in range(loops):
                # --------THIS SECTION DEALS THIS GETTING THE 16 BYTE ARRAY CALLED THE STATE FROM THE MESSAGE------------
                # Initialize the state and get the necessary block of 16 characters
                state = message_bytes[k * 16: (k + 1) * 16]
                # --------------NOW WE HAVE OUR STATE AND CAN START ENCRYPTION-------------------------------------------

                # Initial Round
                state = self.addroundkey(state, self.key[0:16])  # Whitening / Add round key

                # Main Rounds
                for icounter in range(numofrounds):
                    state = self.subbytes(state)
                    state = self.shiftrows(state)
                    state = self.mixcolumns(state)
                    state = self.addroundkey(state, self.key[16 * (icounter + 1): 16 * (icounter + 2)])

                # Final Round
                state = self.subbytes(state)
                state = self.shiftrows(state)
                state = self.addroundkey(state, self.key[160:])

                # -------------------------------------------------------------------------------------------------------
                # AT THIS POINT, THE ENCRYPTION IS DONE.
                # THE FOLLOWEING CODE IS JUST HOW THE ENCRYPTED MESSAGE SHOULD BE OUTPUTTED.

                if output_type == "hex":
                    for i in range(16):
                        state[i] = op.bintohex(state[i])[6:]
                        encryptedmessage += (state[i])

                elif output_type == "string":
                    for i in range(16):
                        state[i] = op.bintostring(state[i])
                        encryptedmessage += (state[i])

                elif output_type == "bytes":
                    encryptedmessage += state

                else:
                    print("INVALID OUTPUT TYPE. Choose 'hex' 'string' 'bytes'")

            return encryptedmessage

    def decrypt(self, message, message_type, output_type="string"):
        """
        :param message: The message to be decrypted
        :param message_type: The type of the encrypted message. 'hex' or 'string' or 'bytes' or 'file'
        :param output_type: The type of the output. 'string' or 'bytes'
        :return:  The orginal message.
        """

        numofrounds = 9
        proceed = True  # This variable will monitor if all the parameters are correct.

        # ----------THIS SECTION CHECKS ALL PARAMETERS BEFORE STARTING THE DECRYPTON--------------
        # ------------This section gets a byte array from the message-----------------------------------
        # Get the byte array
        message_bytes = []

        if message_type == "hex":
            for i in range(len(message) // 2):
                message_bytes.append(op.hextobin(message[(i * 2):(i * 2) + 2]))

        elif message_type == "string":
            for i in range(len(message)):
                message_bytes.append(op.inttobin(ord(message[i])))

        elif message_type == "bytes":
            message_bytes = message

        elif message_type == "file":
            message_bytes = op.getbytearray(message)

        else:
            print("MESSSAGE TYPE IS INVALID. CHOOSE 'hex' or 'string' or 'bytes' or 'file'.")
            proceed = False

        # --------------

        if len(message_bytes) % 16 != 0:
            proceed = False
            print("The bytes in message parameter is of the wrong size")

        # Check to make sure the message is a string or bytearray
        if str(type(message)) != "<class 'str'>" and str(type(message)) != "<class 'list'>":
            proceed = False
            print("The message must be a string or a bytearray.")

        # This section initializes the decrypted message as either a list or a string
        # depending on the output type
        if output_type == "string":
            decryptedmessage = ""
        elif output_type == "bytes":
            decryptedmessage = []
        else:
            proceed = False
            print("OUTPUT TYPE IS INVALID. CHOOSE 'string' or 'bytes'.")

        if proceed:
            loops = len(message_bytes) // 16

            for k in range(loops):
                # Initialize the state and get the necessary block of 16 characters
                # Here, we have the bytes and we just have to write the current block of 16 to the state
                state = message_bytes[k * 16:(k + 1) * 16]

                # Now we have our key and state and we can start the decryption

                # First step is reverse the final round
                state = self.addroundkey(state, self.key[160:])
                state = self.inv_shiftrows(state)
                state = self.inv_subbytes(state)

                # Reverse the main rounds
                for icounter in range(numofrounds):
                    state = self.addroundkey(state, self.key[16 * (9 - icounter): 16 * (10 - icounter)])
                    state = self.inv_mixcolumns(state)
                    state = self.inv_shiftrows(state)
                    state = self.inv_subbytes(state)

                # Reverse the initial round
                state = self.addroundkey(state, self.key[0:16])

                if output_type == "string":
                    for icounter in range(16):
                        decryptedmessage += chr(op.bintoint(state[icounter]))
                else:
                    decryptedmessage += state

            return decryptedmessage

    def communicate(self, sender=False, IP='0.0.0.0'):
        """
        This is the method to call when the user wants to communicate between 2 computers
        :param sender: If this computer sends first, set this value to True
        :param IP: If sender is True, then the IP of the receiving computer must be inserted here
        """
        global socketHolder
        if sender:
            socketHolder.connect((IP, 54321))
            print("connected")
        else:
            socketHolder.bind(('0.0.0.0', 54321))
            socketHolder.listen()
            connection, address = socketHolder.accept()
            socketHolder = connection

        a = threading.Thread(target=self.sends)
        b = threading.Thread(target=self.recv)
        a.start()
        b.start()

    def sends(self):
        global socketHolder  # call variable as global
        while True:
            msg = input("")  # placeholder for a way fof getting input
            msg = self.encrypt(msg, "string", "string")
            socketHolder.send(msg.encode(encoding='utf-8', errors='ignore'))  # sends input(add your encryption here)

    def recv(self):
        global socketHolder  # call variable as global
        while True:
            data = socketHolder.recv(4096).decode(encoding='utf-8', errors='strict')  # recieves data from connection
            print(self.decrypt(data, "string", "string"))


class SHA256:
    # --------Unchanging Constants-------
    # these are constants used in the calculations
    # The list is available on wikipedia but must be in binary for the calculations
    constants = ['01000010100010100010111110011000', '01110001001101110100010010010001',
                 '10110101110000001111101111001111',
                 '11101001101101011101101110100101', '00111001010101101100001001011011',
                 '01011001111100010001000111110001',
                 '10010010001111111000001010100100', '10101011000111000101111011010101',
                 '11011000000001111010101010011000',
                 '00010010100000110101101100000001', '00100100001100011000010110111110',
                 '01010101000011000111110111000011',
                 '01110010101111100101110101110100', '10000000110111101011000111111110',
                 '10011011110111000000011010100111',
                 '11000001100110111111000101110100', '11100100100110110110100111000001',
                 '11101111101111100100011110000110',
                 '00001111110000011001110111000110', '00100100000011001010000111001100',
                 '00101101111010010010110001101111',
                 '01001010011101001000010010101010', '01011100101100001010100111011100',
                 '01110110111110011000100011011010',
                 '10011000001111100101000101010010', '10101000001100011100011001101101',
                 '10110000000000110010011111001000',
                 '10111111010110010111111111000111', '11000110111000000000101111110011',
                 '11010101101001111001000101000111',
                 '00000110110010100110001101010001', '00010100001010010010100101100111',
                 '00100111101101110000101010000101',
                 '00101110000110110010000100111000', '01001101001011000110110111111100',
                 '01010011001110000000110100010011',
                 '01100101000010100111001101010100', '01110110011010100000101010111011',
                 '10000001110000101100100100101110',
                 '10010010011100100010110010000101', '10100010101111111110100010100001',
                 '10101000000110100110011001001011',
                 '11000010010010111000101101110000', '11000111011011000101000110100011',
                 '11010001100100101110100000011001',
                 '11010110100110010000011000100100', '11110100000011100011010110000101',
                 '00010000011010101010000001110000',
                 '00011001101001001100000100010110', '00011110001101110110110000001000',
                 '00100111010010000111011101001100',
                 '00110100101100001011110010110101', '00111001000111000000110010110011',
                 '01001110110110001010101001001010',
                 '01011011100111001100101001001111', '01101000001011100110111111110011',
                 '01110100100011111000001011101110',
                 '01111000101001010110001101101111', '10000100110010000111100000010100',
                 '10001100110001110000001000001000',
                 '10010000101111101111111111111010', '10100100010100000110110011101011',
                 '10111110111110011010001111110111',
                 '11000110011100010111100011110010']

    @staticmethod
    def create_salt():
        """
        This method simply uses a random number generator to get a random salt
        :return: A random string
        """
        saltval = op.bintohex(op.inttobin(random.getrandbits(128)))
        return saltval

    @staticmethod
    def hash(message, messagetype, salt=""):
        """
        This method hashes any string.
        :param message: The messaee that needs to be hashed
        :param salt: A salt is appended to a message, it is optional whether you want to include a salt while hashing
        :param messagetype: The type of message. 'string' or 'file'
        :return: The hashed message
        """
        # ---------Initial Hash Values-------
        # these hash values change for each 512 bit chunk, and start as the following
        h0 = "01101010000010011110011001100111"
        h1 = "10111011011001111010111010000101"
        h2 = "00111100011011101111001101110010"
        h3 = "10100101010011111111010100111010"
        h4 = "01010001000011100101001001111111"
        h5 = "10011011000001010110100010001100"
        h6 = "00011111100000111101100110101011"
        h7 = "01011011111000001100110100011001"

        # -----------------Padding-----------------
        # This sections initializes the first 16 "words". Each "word" is 32 bits.

        # gets the message input and turns it into binary
        if messagetype == "string":
            paddedmessage = op.stringtobin(message + salt)
        elif messagetype == "file":
            file_array = op.getbytearray(message)
            paddedmessage = ""
            for icounter in range(len(file_array)):
                paddedmessage += file_array[icounter]

        else:
            print("Message Type Invalid. Must be 'string' or 'file' defaulted to string")
            paddedmessage = op.stringtobin(message + salt)

        # takes the length of the padded message, converts it into bits, and stores it in bitsinmessage
        bitsinmessage = op.inttobin(len(paddedmessage))

        # Pad the bits in message to be of length 64
        while len(bitsinmessage) < 64:
            bitsinmessage = "0" + bitsinmessage

        # adds a one to the end of the padded message
        paddedmessage += "1"

        # adds 0's to make the length of  (paddedmessage - the length of bitsinmessage) a multiple of 512
        while (len(paddedmessage) + len(bitsinmessage)) % 512 != 0:
            paddedmessage += "0"

        # adds bits in messsage to the end of padded message
        paddedmessage += bitsinmessage

        # creates a variable called fullmessage which is the padded message and is not affected
        fullmessage = paddedmessage

        # for each 512-bit chunk of full message (represented my paddedmessage)the following happens
        for z in range(len(paddedmessage) // 512):
            # words is a list that stores the 32 bit 'words'
            words = []
            # takes the chunk and seperates it into 16, 32 bit words
            paddedmessage = fullmessage[512 * z: 512 * (z + 1)]
            for i in range(16):
                words.append(paddedmessage[32 * i: 32 * (i + 1)])

            # ----------Creating the 64 words from the first 16-------

            # creates the other 48 words using the first 16
            for i in range(16, 64):

                s0 = op.bitxor(op.bitxor(op.rightrotate(words[i - 15], 7), op.rightrotate(words[i - 15], 18)),
                               op.rightshift(words[i - 15], 3))
                s1 = op.bitxor(op.bitxor(op.rightrotate(words[i - 2], 17), op.rightrotate(words[i - 2], 19)),
                               op.rightshift(words[i - 2], 10))

                sum1 = op.bitadd(words[i - 16], s0)
                sum2 = op.bitadd(words[i - 7], s1)
                total = op.bitadd(sum1, sum2)
                while len(total) < 32:
                    total = "0" + total

                # Only take the first 32 bits, starting from the right by chopping of the first 8 bytes
                # if its bigger
                if len(total) > 32:
                    total = total[len(total) - 32:]

                # adds the new word into the list of words
                words.append(total)

            # -----Initialize variables to initial hash values, as they will change-----
            a = h0
            b = h1
            c = h2
            d = h3
            e = h4
            f = h5
            g = h6
            h = h7

            # Checks to make sure the bit length of any variable doesn't exceed 32
            for i in range(64):
                if len(a) > 32:
                    a = a[len(a) - 32:]

                if len(b) > 32:
                    b = b[len(b) - 32:]

                if len(c) > 32:
                    c = c[len(c) - 32:]

                if len(d) > 32:
                    d = d[len(d) - 32:]

                if len(e) > 32:
                    e = e[len(e) - 32:]

                if len(f) > 32:
                    f = f[len(f) - 32:]

                if len(g) > 32:
                    g = g[len(g) - 32:]

                if len(h) > 32:
                    h = h[len(h) - 32:]

                # The Main Algorithm
                S1 = op.bitxor(op.rightrotate(e, 6), op.rightrotate(e, 11), op.rightrotate(e, 25))

                # Choose Function
                ch = op.bitxor(op.bitand(e, f), op.bitand(op.bitnot(e), g))

                temp1 = op.bitadd(h, S1, ch, SHA256.constants[i], words[i])
                S0 = op.bitxor(op.rightrotate(a, 2), op.rightrotate(a, 13), op.rightrotate(a, 22))
                # The majority function
                maj = op.bitxor(op.bitand(a, b), op.bitand(a, c), op.bitand(b, c))

                temp2 = op.bitadd(S0, maj)

                # Variable Swaps and additions
                h = g
                g = f
                f = e
                e = op.bitadd(d, temp1)
                d = c
                c = b
                b = a
                a = op.bitadd(temp1, temp2)

            # Add each letter to its corresponding hash value
            h0 = op.bitadd(h0, a)
            h1 = op.bitadd(h1, b)
            h2 = op.bitadd(h2, c)
            h3 = op.bitadd(h3, d)
            h4 = op.bitadd(h4, e)
            h5 = op.bitadd(h5, f)
            h6 = op.bitadd(h6, g)
            h7 = op.bitadd(h7, h)

        # Convert to Hex, then to a string.
        h0 = str(op.bintohex(h0))
        h1 = str(op.bintohex(h1))
        h2 = str(op.bintohex(h2))
        h3 = str(op.bintohex(h3))
        h4 = str(op.bintohex(h4))
        h5 = str(op.bintohex(h5))
        h6 = str(op.bintohex(h6))
        h7 = str(op.bintohex(h7))

        # Cut off if the length of the hex string is greater than 8
        if len(h0) > 8:
            h0 = h0[len(h0) - 8:]
        if len(h1) > 8:
            h1 = h1[len(h1) - 8:]
        if len(h2) > 8:
            h2 = h2[len(h2) - 8:]
        if len(h3) > 8:
            h3 = h3[len(h3) - 8:]
        if len(h4) > 8:
            h4 = h4[len(h4) - 8:]
        if len(h5) > 8:
            h5 = h5[len(h5) - 8:]
        if len(h6) > 8:
            h6 = h6[len(h6) - 8:]
        if len(h7) > 8:
            h7 = h7[len(h7) - 8:]

        # Concatenate the strings
        finalhash = h0 + h1 + h2 + h3 + h4 + h5 + h6 + h7
        return finalhash

    @staticmethod
    def send(serverIP, message):
        """
        :param serverIP: This is the IP of the computer you want to send the message to.
        :param message: The message to be sent to the computer.
        """
        hashedmessage = SHA256.hash(message, "string")
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sender:
            sender.connect((serverIP, 5432))
            sender.send(bytes(hashedmessage, encoding='utf-8'))

        time.sleep(0.2)

    @staticmethod
    def server_recv():
        """
        This initializes this computer as a server which can receive messages
        from anyone using the send function above.
        """
        while True:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server:
                server.bind(("0.0.0.0", 5432))
                server.listen()
                connection, address = server.accept()
                server.setblocking(False)
                with connection:
                    print(address[0], "connected")
                    print(connection.recv(4096).decode(encoding='utf-8', errors='ignore'))


class RSA:
    # (one line function) for modular multiplicative inverse of a and n, found on code signal, made by Yousef Hadder
    MMI = lambda A, n, s=1, t=0, N=0: (n < 2 and t % N or RSA.MMI(n, A % n, t, s - A // n * t, N or n), -1)[n < 1]
    # credit : Yousef Hadder, Code signal
    '''Sets up the a class for an instance of rsa communication'''

    def __init__(self):
        '''
        This function initializes an RSA object, meaning all related numbers are generated, as are the keys
        The code follows this algorithm to generate the keys, and the attributes are aptly named:
        p and q are two prime numbers, generated randomly (not in a cryptographically secure way) from a list
        p and q are guarenteed to be different before continuing
        n, the modulus for both of the future keys is generated by p and q's multiplication
        the totient, number of coprimes of p and q from 1 to n found using the LCM p-1 and q-1
        e, the first part of the encryption key is generated using a number coprime with the totient and n less than the totient
        this is circumvented using
        d is generated as the modular multiplicative inverse of e and the totient
        '''
        self.numlist = [199, 211, 223, 227, 229, 233, 239, 241, 251, 257,
                        263, 269, 271, 277, 281, 283, 293, 307, 311, 313]

        # The list of primes above is used to generate prme numbers to be used in the code
        self.p = self.numlist[random.randint(0, len(self.numlist) - 1)]  # p is generated randomly
        self.q = self.numlist[random.randint(0, len(self.numlist) - 1)]  # q is generated randomly
        while self.q == self.p:  # as p and q must not be equal, this runs the random selsection until different values selected
            self.q = self.numlist[random.randint(0, len(self.numlist) - 1)]
        self.n = self.p * self.q  # n is genrated as the product of p and q
        self.totient = (self.p - 1) * (self.q - 1) // math.gcd(self.p - 1,
                                                               self.q - 1)  # totient(n), the number of coprimes with p and q from 1 to n is genterated
        self.numlist2 = []
        for icounter in range(2, self.totient):  # counts to one past upper limit (pre conditional)
            bprime = True  # predefines each number as prime, to be disproven
            ichecker = 2  # starts checker at 2, as that is the smallest prime
            while bprime != False and ichecker < int(
                    float(icounter ** (1 / 2) + 1)):  # allows exit when proven composite or after all test cases
                if icounter % ichecker == 0:  # checks if the mod of any number gives 0 indicating non prime
                    bprime = False  # sets prime value to false, so it is not counted in later commands
                else:
                    ichecker += 1  # ichecker moves onto next test number
            if bprime == True and self.totient % icounter != 0:
                self.numlist2.append(icounter)  # appends number
        self.e = self.numlist2[random.randint(0, len(self.numlist2))]

        self.d = RSA.MMI(self.e, self.totient)  # implementation of lambda

        self.encryptkey = (self.e, self.n)  # generates tuple to act as lock
        self.decryptkey = (self.d, self.n)  # generates tuple to act as key

    @staticmethod
    def encrypt(k1, k2, message):
        '''
        :param k1: exponential part of key
        :param k2: modulus part of key
        :param message: message to encrypt
        :return: string of numbers seperated by
        '''
        encrypted = []
        for letter in message:
            encrypted.append((ord(letter)) ** k1 % k2)
        return str(' '.join(str(n) for n in encrypted))

    def decrypt(self, emessage):  # takes an encrypted message
        '''
        :param emessage: This is an encrypted message, encrypted by the respective method in this very class or the staticmethod 'send'
        :return: The decrypted emessage as a string using the keys for the instance of conversation
        '''
        emessage = emessage.split()
        decrypted = []  # creates an empty list
        for n in (emessage):
            decrypted.append(
                (int(n) ** (self.decryptkey[0])) % (self.decryptkey[1]))  # Decrypts ASCII value (decrypted) to list
        decrypted = "".join(str(chr(n)) for n in
                            decrypted)  # creates string from list of decrypted values and turns each ASCII to a character
        return decrypted

    def server(self):
        '''
        Creates a single client server that recieves a meaningless message, sends the public key to the client, and
        recieves an encrypted message.
        :return: The dercypted message using the decrypt method found in this class
        '''
        incoming = []  # creates an empty list to recieve the incoming encrypted characters
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server:  # creates a "setup" server
            server.bind(("0.0.0.0", 15432))  # binds the socket to listen on all available networks
            server.listen()  # listens for a client to connect
            connection, address = server.accept()  # recieves two return values of accept() the latter will be used to send keys
            server.close()  # closes the connection establishing code
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server:  # sends the key as generated by init()
            server.connect((address[0], 6433))  # uses pre-established address variable to get server IP
            server.send(
                bytes((str(self.encryptkey[0])) + " " + (str(self.encryptkey[1])), encoding='utf-8'))  # sends key
        with socket.socket(socket.AF_INET,
                           socket.SOCK_STREAM) as server:  # creates  the connection to recieve the message
            server.bind(("0.0.0.0", 15444))
            server.listen()  # listens on all networks
            conn, addr = server.accept()  # recieves two input from accept()
            with conn:
                length = int(conn.recv(4096).decode(encoding='utf-8', errors='strict'))
                for n in range(length):
                    incoming.append(int(conn.recv(4096).decode(encoding='utf-8', errors='strict')))
                print(incoming)
                return (self.decrypt(incoming))

    @staticmethod
    def RSA_send(IP):
        '''
        This program sends an encrypted message to a specified ip
        :param IP: An Ip to send an encrypted message to
        :return: none
        '''
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server:
            server.connect((IP, 15432))  # connects to the computer
            server.send(bytes("bridgebuilder", encoding='utf-8'))  # sends a meanngless message to establish connection
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server:
            server.bind(("0.0.0.0", 6433))  # binds server to recieve keys
            server.listen()
            connection, address = server.accept()
            with connection:
                key = (connection.recv(4096).decode(encoding='utf-8', errors='ignore')).split(
                    " ")  # splits message formatted by server method
                key0 = int(key[0])
                key1 = int(key[1])
            server.close()
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sender:
                time.sleep(2)  # waits for server to start listening before connectiong
                sender.connect((IP, 15444))  # connects to other device
                message = input("Send:")  # recieves a message to send
                sender.send(bytes(str(len(message)),
                                  encoding='utf-8'))  # sends length of message for other device to recieve that many times
                for n in message:  # runs for loop for length of message
                    sender.send(bytes((str(((ord(n)) ** key0) % key1)),
                                      encoding='utf-8'))  # sends each letter of message with delay
                    time.sleep(0.05)
                sender.close()


class TripleDES:
    # Initialize all lookup tables used for encryption and decryption
    ColumnNumberTables = [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
                           0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
                           4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
                           15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13],

                          [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
                           3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
                           0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
                           13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9],

                          [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
                           13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
                           13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
                           1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12],

                          [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
                           13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
                           10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
                           3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14],

                          [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
                           14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
                           4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
                           11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3],

                          [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
                           10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
                           9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
                           4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13],

                          [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
                           13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
                           1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
                           6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12],

                          [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
                           1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
                           7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
                           2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]

    # a lookup table for initial permutation
    InitialPerm = [58, 50, 42, 34, 26, 18, 10, 2,
                   60, 52, 44, 36, 28, 20, 12, 4,
                   62, 54, 46, 38, 30, 22, 14, 6,
                   64, 56, 48, 40, 32, 24, 16, 8,
                   57, 49, 41, 33, 25, 17, 9, 1,
                   59, 51, 43, 35, 27, 19, 11, 3,
                   61, 53, 45, 37, 29, 21, 13, 5,
                   63, 55, 47, 39, 31, 23, 15, 7]

    # a lookup table for expansion bit
    Expansionbit = [32, 1, 2, 3, 4, 5,
                    4, 5, 6, 7, 8, 9,
                    8, 9, 10, 11, 12, 13,
                    12, 13, 14, 15, 16, 17,
                    16, 17, 18, 19, 20, 21,
                    20, 21, 22, 23, 24, 25,
                    24, 25, 26, 27, 28, 29,
                    28, 29, 30, 31, 32, 1]

    # a lookup table for second permutation
    SecondPerm = [16, 7, 20, 21,
                  29, 12, 28, 17,
                  1, 15, 23, 26,
                  5, 18, 31, 10,
                  2, 8, 24, 14,
                  32, 27, 3, 9,
                  19, 13, 30, 6,
                  22, 11, 4, 25]

    # a lookup table for the final permutation
    Finalperm = [40, 8, 48, 16, 56, 24, 64, 32,
                 39, 7, 47, 15, 55, 23, 63, 31,
                 38, 6, 46, 14, 54, 22, 62, 30,
                 37, 5, 45, 13, 53, 21, 61, 29,
                 36, 4, 44, 12, 52, 20, 60, 28,
                 35, 3, 43, 11, 51, 19, 59, 27,
                 34, 2, 42, 10, 50, 18, 58, 26,
                 33, 1, 41, 9, 49, 17, 57, 25]

    # Look up table for Permuted Choice 1
    PC_1 = [57, 49, 41, 33, 25, 17, 9, 1,
            58, 50, 42, 34, 26, 18, 10, 2,
            59, 51, 43, 35, 27, 19, 11, 3,
            60, 52, 44, 36, 63, 55, 47, 39,
            31, 23, 15, 7, 62, 54, 46, 38,
            30, 22, 14, 6, 61, 53, 45, 37,
            29, 21, 13, 5, 28, 20, 12, 4]

    # Look up table for Permuted Choice 2
    PC_2 = [14, 17, 11, 24, 1, 5,
            3, 28, 15, 6, 21, 10,
            23, 19, 12, 4, 26, 8,
            16, 7, 27, 20, 13, 2,
            41, 52, 31, 37, 47, 55,
            30, 40, 51, 45, 33, 48,
            44, 49, 39, 56, 34, 53,
            46, 42, 50, 36, 29, 32]

    # List for the changing iterations for rotating
    iteration = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]

    def __init__(self, plainkey):
        self.key = self.keyCreator(plainkey)

    @staticmethod
    def Perm(listinput, inputmessage):

        """
        :param listinput: is the table you want to permute the input message according to
        :param inputmessage: is the message that you want to permute
        :return: returns the permuted message
        """

        # initalizes a variable called finalmessage
        finalmessage = ""
        listlength = len(listinput)

        for index in range(listlength):
            finalmessage += inputmessage[listinput[index] - 1]

        return finalmessage

    @staticmethod
    def Sbox(inputmessage):

        """
        :param inputmessage: the message that you want to permute
        :return: returns the permuted message
        """

        # the tables that are used to get the output message for every iteration

        finalmessage = ""

        for boxnum in range(8):  # Substitution Box

            # takes 6 bits at a time from the message
            sixbits = inputmessage[boxnum * 6: (boxnum + 1) * 6]

            # the row is the first but and the last bit of the sixbits
            row = sixbits[0] + sixbits[5]

            # the column is the middle 4
            columns = sixbits[1] + sixbits[2] + sixbits[3] + sixbits[4]

            # converts the row and column to an integer
            row = op.bintoint(row)
            columns = op.bintoint(columns)

            # finds a value using the current s-box to
            columnrowindex = (row * 16) + columns

            # makes temp equal the the corresponding number on the table
            temp = op.inttobin(TripleDES.ColumnNumberTables[boxnum][columnrowindex])[4:]

            # adds the temp message to finalmesssage
            finalmessage += temp
        return finalmessage

    def DESencrypt(self, input, Keys, round):
        """
        :param input: plain text message
        :param Keys: which keys you are using
        :param round: which round you need to use.
        :return:
        """
        final = ''

        input = op.stringtobin(input)

        # pads the message with zeros after it to make it a multiple of 64
        while len(input) % 64 != 0:
            input += "0"

        # finds out how many blocks of 64 there are
        blocks = len(input) // 64

        # runs for every block
        for index in range(blocks):

            # gets the 64 bit chunk from the message
            message = input[index * 64: (index + 1) * 64]

            # does the initial permutation
            message = self.Perm(TripleDES.InitialPerm, message)

            # splits the message into left and right
            MessageLeft = message[0:32]
            MessageRight = message[32:64]

            # runs for each key
            for subkey in range(16):
                righttemp = ''

                # lefttemp becomes message right we do this because messageLeft has to equal
                # message right, but we use MessageRight in another step so lefttemp is necessary
                lefttemp = MessageRight

                # expands righttemp
                righttemp = self.Perm(TripleDES.Expansionbit, MessageRight)

                righttemp = op.bitxor(Keys[round][subkey], righttemp)  # xors the subkey and right temp

                while len(righttemp) < 48:
                    righttemp = "0" + righttemp  # pads the right temp until it reaches the desired length

                righttemp = self.Sbox(righttemp)  # runs sbox function on righttemp

                righttemp = self.Perm(TripleDES.SecondPerm, righttemp)  # runs perm function on right temp

                MessageRight = op.bitxor(MessageLeft, righttemp)  # xors messageleft with message right

                while len(MessageRight) < 32:
                    MessageRight = "0" + MessageRight  # pads the message until it reaches 32 bits

                MessageLeft = lefttemp

            temp = ''

            message = (MessageRight + MessageLeft)  # combines the two halves of the message

            for g in range(64):
                temp += message[TripleDES.Finalperm[g] - 1]  # final permutation

            final += temp

        return op.bintostring(final)  # returns string of encrypted message.

    def DESdecrypt(self, input, Keys, round):
        """
        :param input: encrypted message
        :param Keys: which keys to use
        :param round: which round you need to use
        :return:
        """

        final = ''

        input = op.stringtobin(input)

        # pads the message with zeros after it to make it a multiple of 64
        while len(input) % 64 != 0:
            input += "0"

        # finds out how many blocks of 64 there are
        blocks = len(input) // 64

        # runs for every block
        for index in range(blocks):

            # gets the 64 bit chunk from the message
            message = input[index * 64: (index + 1) * 64]

            # does the initial permutation
            message = self.Perm(TripleDES.InitialPerm, message)

            # splits the message into left and right
            MessageLeft = message[0:32]
            MessageRight = message[32:64]

            # runs for each key
            for subkey in range(16):
                righttemp = ''

                # lefttemp becomes message right we do this because messageLeft has to equal
                # message right, but we use MessageRight in another step so lefttemp is necessary
                lefttemp = MessageRight

                # expands righttemp
                righttemp = self.Perm(TripleDES.Expansionbit, MessageRight)

                righttemp = op.bitxor(Keys[round][15 - subkey],
                                      righttemp)  # XOR the keys in inverse order with right temp

                while len(
                        righttemp) < 48:  # while xor-ing the subkey and righttemp, the length of the final message may be lower than 48 due to no padding from the function
                    righttemp = "0" + righttemp

                righttemp = self.Sbox(righttemp)  # runs the sbox function on right temp

                righttemp = self.Perm(TripleDES.SecondPerm, righttemp)  # run perm fucntion on right temp

                MessageRight = op.bitxor(MessageLeft, righttemp)  # xor the message left and right temp

                while len(MessageRight) < 32:
                    MessageRight = "0" + MessageRight  # the xor may need to be padded, as the function itself does not include it.

                MessageLeft = lefttemp  # message left is given the value of lefttemp

            temp = ''

            message = (MessageRight + MessageLeft)  # combines the two messages

            for g in range(64):
                temp += message[TripleDES.Finalperm[g] - 1]  # does the final permutaion

            final += temp

        return op.bintostring(final)  # function returns the string of the final decrypted message

    def encrypt(self, message, messagetype, outputtype="hex"):
        """
        :param message: inital message or file to be encrypted
        :param messagetype: type of the message 'file' or 'string'.
        :param outputtype: Output type is one of the following:  'string' 'hex(default)' 'bytes'
        :return:
        """
        stringmessage = ""
        if messagetype == "string":  # formats message to a string
            stringmessage = message

        elif messagetype == "file":
            bytesmessage = op.getbytearray(message)
            for i in range(len(bytesmessage)):  # formats message as a file
                stringmessage += op.bintostring(bytesmessage[i])

        else:
            print("Message type invalid. Deafulted to string")
            stringmessage = message  # defaults message to a string

        encryptedmessage = self.DESencrypt(self.DESdecrypt(self.DESencrypt(stringmessage, self.key, 0), self.key, 1),
                                           self.key, 2)

        if outputtype == "string":  # formats output to hex
            pass

        elif outputtype == "hex":
            encryptedmessage = op.bintohex(op.stringtobin(encryptedmessage))  # formats output to hex
            return encryptedmessage

        elif outputtype == "bytes":
            temp = []
            for i in range(len(encryptedmessage)):
                temp.append(op.stringtobin(encryptedmessage[i]))  # formats message to binary

            encryptedmessage = temp

        return encryptedmessage

    def decrypt(self, message, messagetype, outputtype="hex"):
        """
        :param message: encrypted message
        :param messagetype: it can be 'string' , 'hex', 'bytes', or 'file'
        :param outputtype: it can be 'string', 'bytes'
        :return:
        """
        if messagetype == "string":
            encryptedmessage = message  # formats message to string

        elif messagetype == "hex":
            encryptedmessage = op.bintostring(op.hextobin(message))

        elif messagetype == "bytes":
            encryptedmessage = ""  # formats message to binary
            for i in range(len(message)):
                encryptedmessage += op.bintostring(message[i])

        elif messagetype == "file":
            bytesmessage = op.getbytearray(message)
            encryptedmessage = ""  # formats message to file
            for i in range(len(bytesmessage)):
                encryptedmessage += op.bintostring(bytesmessage[i])

        else:
            print("Message Type Invalid. Defaulted to string")
            encryptedmessage = message

        decryptedmessage = self.DESdecrypt(self.DESencrypt(self.DESdecrypt(encryptedmessage, self.key, 2), self.key, 1),
                                           self.key, 0)

        if outputtype == "string":
            pass

        elif outputtype == "bytes":
            temp = []
            for i in range(len(decryptedmessage)):
                temp.append(op.stringtobin(decryptedmessage[i]))

            decryptedmessage = temp

        else:
            print("Output Type Invalid. Defaulted to string")

        return decryptedmessage

    @staticmethod
    def keyCreator(plainkey):
        """
        :param plainkey: requires a plain-text key of max 24 characters
        """
        plainkey = op.stringtobin(plainkey)  # changes the key to bits

        while len(plainkey) < 192:  # Pads the bits with zeros
            plainkey += "0"

        Keys = [[], [], []]  # Initalizes the final list of the three keys

        for n in range(3):  # seperates the 192 bits into three chunks

            key = plainkey[n * 64: (n + 1) * 64]
            temp = ""
            lkey = ""
            rkey = ""
            Key = []

            for i in range(56):  # Permutes the block with Permuted choice 1
                temp += (key[TripleDES.PC_1[i] - 1])

            for value in range(28):  # splits the block into two halves
                lkey += (temp[value])

            for value in range(28, 56):
                rkey += (temp[value])

            for i in range(16):
                lkey = op.leftrotate(lkey, TripleDES.iteration[i])  # rotates left block by the given iteration
                rkey = op.leftrotate(rkey, TripleDES.iteration[i])  # rotates right block by the given iteration

                newkey = lkey + rkey  # puts the blocks back together

                temp = ""
                for i in range(48):  # permutes the block again with Permuted choice 2
                    temp += (newkey[TripleDES.PC_2[i] - 1])

                Key.append(temp)  # appends these values to a list

            Keys[n] = Key  # appends the list to a final list.

        return Keys  # returns the final list of the three keys and their subkeys.

    def communicate(self, sender=False, IP='0.0.0.0'):
        """
        This is the method to call when the user wants to communicate between 2 computers
        :param sender: If this computer sends first, set this value to True
        :param IP: If sender is True, then the IP of the receiving computer must be inserted here
        """
        global socketHolder
        if sender:
            socketHolder.connect((IP, 54321))
            print("connected")
        else:
            socketHolder.bind(('0.0.0.0', 54321))
            socketHolder.listen()
            connection, address = socketHolder.accept()
            socketHolder = connection

        a = threading.Thread(target=self.sends)
        b = threading.Thread(target=self.recv)
        a.start()
        b.start()

    def sends(self):
        global socketHolder  # call variable as global
        while True:
            msg = input("")  # placeholder for a way fof getting input
            msg = self.encrypt(msg, "string", "string")
            socketHolder.send(msg.encode(encoding='utf-8', errors='ignore'))  # sends input(add your encryption here)

    def recv(self):
        global socketHolder  # call variable as global
        while True:
            data = socketHolder.recv(4096).decode(encoding='utf-8', errors='strict')  # recieves data from connection
            print(self.decrypt(data, "string", "string"))


class Blowfish:
    def __init__(self, plainkey):
        #Look up tables
        self.p_array = ["00100100001111110110101010001000", "10000101101000110000100011010011",
                        "00010011000110011000101000101110", "00000011011100000111001101000100",
                        "10100100000010010011100000100010", "00101001100111110011000111010000",
                        "00001000001011101111101010011000", "11101100010011100110110010001001",
                        "01000101001010000010000111100110", "00111000110100000001001101110111",
                        "10111110010101000110011011001111", "00110100111010010000110001101100",
                        "11000000101011000010100110110111", "11001001011111000101000011011101",
                        "00111111100001001101010110110101", "10110101010001110000100100010111",
                        "10010010000101101101010111011001", "10001001011110011111101100011011"]

        self.s_box = [
            ["11010001001100010000101110100110", "10011000110111111011010110101100", "00101111111111010111001011011011",
             "11010000000110101101111110110111", "10111000111000011010111111101101", "01101010001001100111111010010110",
             "10111010011111001001000001000101", "11110001001011000111111110011001", "00100100101000011001100101000111",
             "10110011100100010110110011110111", "00001000000000011111001011100010", "10000101100011101111110000010110",
             "01100011011010010010000011011000", "01110001010101110100111001101001", "10100100010110001111111010100011",
             "11110100100100110011110101111110", "00001101100101010111010010001111", "01110010100011101011011001011000",
             "01110001100010111100110101011000", "10000010000101010100101011101110", "01111011010101001010010000011101",
             "11000010010110100101100110110101", "10011100001100001101010100111001", "00101010111100100110000000010011",
             "11000101110100011011000000100011", "00101000011000001000010111110000", "11001010010000010111100100011000",
             "10111000110110110011100011101111", "10001110011110011101110010110000", "01100000001110100001100000001110",
             "01101100100111100000111010001011", "10110000000111101000101000111110", "11010111000101010111011111000001",
             "10111101001100010100101100100111", "01111000101011110010111111011010", "01010101011000000101110001100000",
             "11100110010101010010010111110011", "10101010010101011010101110010100", "01010111010010001001100001100010",
             "01100011111010000001010001000000", "01010101110010100011100101101010", "00101010101010110001000010110110",
             "10110100110011000101110000110100", "00010001010000011110100011001110", "10100001010101001000011010101111",
             "01111100011100101110100110010011", "10110011111011100001010000010001", "01100011011011111011110000101010",
             "00101011101010011100010101011101", "01110100000110000011000111110110", "11001110010111000011111000010110",
             "10011011100001111001001100011110", "10101111110101101011101000110011", "01101100001001001100111101011100",
             "01111010001100100101001110000001", "00101000100101011000011001110111", "00111011100011110100100010011000",
             "01101011010010111011100110101111", "11000100101111111110100000011011", "01100110001010000010000110010011",
             "01100001110110000000100111001100", "11111011001000011010100110010001", "01001000011111001010110001100000",
             "01011101111011001000000000110010", "11101111100001000101110101011101", "11101001100001010111010110110001",
             "11011100001001100010001100000010", "11101011011001010001101110001000", "00100011100010010011111010000001",
             "11010011100101101010110011000101", "00001111011011010110111111110011", "10000011111101000100001000111001",
             "00101110000010110100010010000010", "10100100100001000010000000000100", "01101001110010001111000001001010",
             "10011110000111111001101101011110", "00100001110001100110100001000010", "11110110111010010110110010011010",
             "01100111000011001001110001100001", "10101011110100111000100011110000", "01101010010100011010000011010010",
             "11011000010101000010111101101000", "10010110000011111010011100101000", "10101011010100010011001110100011",
             "01101110111011110000101101101100", "00010011011110100011101111100100", "10111010001110111111000001010000",
             "01111110111110110010101010011000", "10100001111100010110010100011101", "00111001101011110000000101110110",
             "01100110110010100101100100111110", "10000010010000110000111010001000", "10001100111011101000011000011001",
             "01000101011011111001111110110100", "01111101100001001010010111000011", "00111011100010110101111010111110",
             "11100000011011110111010111011000", "10000101110000010010000001110011", "01000000000110100100010010011111",
             "01010110110000010110101010100110", "01001110110100111010101001100010", "00110110001111110111011100000110",
             "00011011111111101101111101110010", "01000010100110110000001000111101", "00110111110100001101011100100100",
             "11010000000010100001001001001000", "11011011000011111110101011010011", "01001001111100011100000010011011",
             "00000111010100110111001011001001", "10000000100110010001101101111011", "00100101110101000111100111011000",
             "11110110111010001101111011110111", "11100011111111100101000000011010", "10110110011110010100110000111011",
             "10010111011011001110000010111101", "00000100110000000000011010111010", "11000001101010010100111110110110",
             "01000000100111110110000011000100", "01011110010111001001111011000010", "00011001011010100010010001100011",
             "01101000111110110110111110101111", "00111110011011000101001110110101", "00010011001110011011001011101011",
             "00111011010100101110110001101111", "01101101111111000101000100011111", "10011011001100001001010100101100",
             "11001100100000010100010101000100", "10101111010111101011110100001001", "10111110111000111101000000000100",
             "11011110001100110100101011111101", "01100110000011110010100000000111", "00011001001011100100101110110011",
             "11000000110010111010100001010111", "01000101110010000111010000001111", "11010010000010110101111100111001",
             "10111001110100111111101111011011", "01010101011110011100000010111101", "00011010011000000011001000001010",
             "11010110101000010000000011000110", "01000000001011000111001001111001", "01100111100111110010010111111110",
             "11111011000111111010001111001100", "10001110101001011110100111111000", "11011011001100100010001011111000",
             "00111100011101010001011011011111", "11111101011000010110101100010101", "00101111010100000001111011001000",
             "10101101000001010101001010101011", "00110010001111011011010111111010", "11111101001000111000011101100000",
             "01010011001100010111101101001000", "00111110000000001101111110000010", "10011110010111000101011110111011",
             "11001010011011111000110010100000", "00011010100001110101011000101110", "11011111000101110110100111011011",
             "11010101010000101010100011110110", "00101000011111101111111111000011", "10101100011001110011001011000110",
             "10001100010011110101010101110011", "01101001010110110010011110110000", "10111011110010100101100011001000",
             "11100001111111111010001101011101", "10111000111100000001000110100000", "00010000111110100011110110011000",
             "11111101001000011000001110111000", "01001010111111001011010101101100", "00101101110100011101001101011011",
             "10011010010100111110010001111001", "10110110111110000100010101100101", "11010010100011100100100110111100",
             "01001011111110111001011110010000", "11100001110111011111001011011010", "10100100110010110111111000110011",
             "01100010111110110001001101000001", "11001110111001001100011011101000", "11101111001000001100101011011010",
             "00110110011101110100110000000001", "11010000011111101001111011111110", "00101011111100010001111110110100",
             "10010101110110111101101001001101", "10101110100100001001000110011000", "11101010101011011000111001110001",
             "01101011100100111101010110100000", "11010000100011101101000111010000", "10101111110001110010010111100000",
             "10001110001111000101101100101111", "10001110011101011001010010110111", "10001111111101101110001011111011",
             "11110010000100100010101101100100", "10001000100010001011100000010010", "10010000000011011111000000011100",
             "01001111101011010101111010100000", "01101000100011111100001100011100", "11010001110011111111000110010001",
             "10110011101010001100000110101101", "00101111001011110010001000011000", "10111110000011100001011101110111",
             "11101010011101010010110111111110", "10001011000000100001111110100001", "11100101101000001100110000001111",
             "10110101011011110111010011101000", "00011000101011001111001111010110", "11001110100010011110001010011001",
             "10110100101010000100111111100000", "11111101000100111110000010110111", "01111100110001000011101110000001",
             "11010010101011011010100011011001", "00010110010111111010001001100110", "10000000100101010111011100000101",
             "10010011110011000111001100010100", "00100001000110100001010001110111", "11100110101011010010000001100101",
             "01110111101101011111101010000110", "11000111010101000100001011110101", "11111011100111010011010111001111",
             "11101011110011011010111100001100", "01111011001111101000100110100000", "11010110010000010001101111010011",
             "10101110000111100111111001001001", "00000000001001010000111000101101", "00100000011100011011001101011110",
             "00100010011010000000000010111011", "01010111101110001110000010101111", "00100100011001000011011010011011",
             "11110000000010011011100100011110", "01010101011000111001000100011101", "01011001110111111010011010101010",
             "01111000110000010100001110001001", "11011001010110100101001101111111", "00100000011111010101101110100010",
             "00000010111001011011100111000101", "10000011001001100000001101110110", "01100010100101011100111110101001",
             "00010001110010000001100101101000", "01001110011100110100101001000001", "10110011010001110010110111001010",
             "01111011000101001010100101001010", "00011011010100010000000001010010", "10011010010100110010100100010101",
             "11010110000011110101011100111111", "10111100100110111100011011100100", "00101011011000001010010001110110",
             "10000001111001100111010000000000", "00001000101110100110111110110101", "01010111000110111110100100011111",
             "11110010100101101110110001101011", "00101010000011011101100100010101", "10110110011000110110010100100001",
             "11100111101110011111100110110110", "11111111001101000000010100101110", "11000101100001010101011001100100",
             "01010011101100000010110101011101", "10101001100111111000111110100001", "00001000101110100100011110011001",
             "01101110100001010000011101101010"],
            ["01001011011110100111000011101001", "10110101101100110010100101000100", "11011011011101010000100100101110",
             "11000100000110010010011000100011", "10101101011011101010011010110000", "01001001101001111101111101111101",
             "10011100111011100110000010111000", "10001111111011011011001001100110", "11101100101010101000110001110001",
             "01101001100110100001011111111111", "01010110011001000101001001101100", "11000010101100011001111011100001",
             "00011001001101100000001010100101", "01110101000010010100110000101001", "10100000010110010001001101000000",
             "11100100000110000011101000111110", "00111111010101001001100010011010", "01011011010000101001110101100101",
             "01101011100011111110010011010110", "10011001111101110011111111010110", "10100001110100101001110000000111",
             "11101111111010000011000011110101", "01001101001011010011100011100110", "11110000001001010101110111000001",
             "01001100110111010010000010000110", "10000100011100001110101100100110", "01100011100000101110100111000110",
             "00000010000111101100110001011110", "00001001011010000110101100111111", "00111110101110101110111111001001",
             "00111100100101110001100000010100", "01101011011010100111000010100001", "01101000011111110011010110000100",
             "01010010101000001110001010000110", "10110111100111000101001100000101", "10101010010100000000011100110111",
             "00111110000001111000010000011100", "01111111110111101010111001011100", "10001110011111010100010011101100",
             "01010111000101101111001010111000", "10110000001110101101101000110111", "11110000010100000000110000001101",
             "11110000000111000001111100000100", "00000010000000001011001111111111", "10101110000011001111010100011010",
             "00111100101101010111010010110010", "00100101100000110111101001011000", "11011100000010010010000110111101",
             "11010001100100010001001111111001", "01111100101010010010111111110110", "10010100001100100100011101110011",
             "00100010111101010100011100000001", "00111010111001011110010110000001", "00110111110000101101101011011100",
             "11001000101101010111011000110100", "10011010111100111101110110100111", "10101001010001000110000101000110",
             "00001111110100000000001100001110", "11101100110010001100011100111110", "10100100011101010001111001000001",
             "11100010001110001100110110011001", "00111011111010100000111000101111", "00110010100000001011101110100001",
             "00011000001111101011001100110001", "01001110010101001000101100111000", "01001111011011011011100100001000",
             "01101111010000100000110100000011", "11110110000010100000010010111111", "00101100101110000001001010010000",
             "00100100100101110111110001111001", "01010110011110011011000001110010", "10111100101011111000100110101111",
             "11011110100110100111011100011111", "11011001100100110000100000010000", "10110011100010111010111000010010",
             "11011100110011110011111100101110", "01010101000100100111001000011111", "00101110011010110111000100100100",
             "01010000000110101101110111100110", "10011111100001001100110110000111", "01111010010110000100011100011000",
             "01110100000010001101101000010111", "10111100100111111001101010111100", "11101001010010110111110110001100",
             "11101100011110101110110000111010", "11011011100001010001110111111010", "01100011000010010100001101100110",
             "11000100011001001100001111010010", "11101111000111000001100001000111", "00110010000101011101100100001000",
             "11011101010000110011101100110111", "00100100110000101011101000010110", "00010010101000010100110101000011",
             "00101010011001011100010001010001", "01010000100101000000000000000010", "00010011001110101110010011011101",
             "01110001110111111111100010011110", "00010000001100010100111001010101", "10000001101011000111011111010110",
             "01011111000100010001100110011011", "00000100001101010101011011110001", "11010111101000111100011101101011",
             "00111100000100010001100000111011", "01011001001001001010010100001001", "11110010100011111110011011101101",
             "10010111111100011111101111111010", "10011110101110101011111100101100", "00011110000101010011110001101110",
             "10000110111000110100010101110000", "11101010111010010110111110110001", "10000110000011100101111000001010",
             "01011010001111100010101010110011", "01110111000111111110011100011100", "01001110001111010000011011111010",
             "00101001011001011101110010111001", "10011001111001110001110100001111", "10000000001111101000100111010110",
             "01010010011001101100100000100101", "00101110010011001100100101111000", "10011100000100001011001101101010",
             "11000110000101010000111010111010", "10010100111000101110101001111000", "10100101111111000011110001010011",
             "00011110000010100010110111110100", "11110010111101110100111010100111", "00110110000111010010101100111101",
             "00011001001110010010011000001111", "00011001110000100111100101100000", "01010010001000111010011100001000",
             "11110111000100110001001010110110", "11101011101011011111111001101110", "11101010110000110001111101100110",
             "11100011101111000100010110010101", "10100110011110111100100010000011", "10110001011111110011011111010001",
             "00000001100011001111111100101000", "11000011001100101101110111101111", "10111110011011000101101010100101",
             "01100101010110000010000110000101", "01101000101010111001100000000010", "11101110110011101010010100001111",
             "11011011001011111001010100111011", "00101010111011110111110110101101", "01011011011011100010111110000100",
             "00010101001000011011011000101000", "00101001000001110110000101110000", "11101100110111010100011101110101",
             "01100001100111110001010100010000", "00010011110011001010100000110000", "11101011011000011011110110010110",
             "00000011001101001111111000011110", "10101010000000110110001111001111", "10110101011100110101110010010000",
             "01001100011100001010001000111001", "11010101100111101001111000001011", "11001011101010101101111000010100",
             "11101110110011001000011010111100", "01100000011000100010110010100111", "10011100101010110101110010101011",
             "10110010111100111000010001101110", "01100100100010110001111010101111", "00011001101111011111000011001010",
             "10100000001000110110100110111001", "01100101010110101011101101010000", "01000000011010000101101000110010",
             "00111100001010101011010010110011", "00110001100111101110100111010101", "11000000001000011011100011110111",
             "10011011010101000000101100011001", "10000111010111111010000010011001", "10010101111101111001100101111110",
             "01100010001111010111110110101000", "11111000001101111000100010011010", "10010111111000110010110101110111",
             "00010001111011011001001101011111", "00010110011010000001001010000001", "00001110001101011000100000101001",
             "11000111111001100001111111010110", "10010110110111101101111110100001", "01111000010110001011101010011001",
             "01010111111101011000010010100101", "00011011001000100111001001100011", "10011011100000111100001111111111",
             "00011010110000100100011010010110", "11001101101100110000101011101011", "01010011001011100011000001010100",
             "10001111110110010100100011100100", "01101101101111000011000100101000", "01011000111010111111001011101111",
             "00110100110001101111111111101010", "11111110001010001110110101100001", "11101110011111000011110001110011",
             "01011101010010100001010011011001", "11101000011001001011011111100011", "01000010000100000101110100010100",
             "00100000001111100001001111100000", "01000101111011101110001010110110", "10100011101010101010101111101010",
             "11011011011011000100111100010101", "11111010110010110100111111010000", "11000111010000101111010001000010",
             "11101111011010101011101110110101", "01100101010011110011101100011101", "01000001110011010010000100000101",
             "11011000000111100111100110011110", "10000110100001010100110111000111", "11100100010010110100011101101010",
             "00111101100000010110001001010000", "11001111011000101010000111110010", "01011011100011010010011001000110",
             "11111100100010001000001110100000", "11000001110001111011011010100011", "01111111000101010010010011000011",
             "01101001110010110111010010010010", "01000111100001001000101000001011", "01010110100100101011001010000101",
             "00001001010110111011111100000000", "10101101000110010100100010011101", "00010100011000101011000101110100",
             "00100011100000100000111000000000", "01011000010000101000110100101010", "00001100010101011111010111101010",
             "00011101101011011111010000111110", "00100011001111110111000001100001", "00110011011100101111000010010010",
             "10001101100100110111111001000001", "11010110010111111110110011110001", "01101100001000100011101111011011",
             "01111100110111100011011101011001", "11001011111011100111010001100000", "01000000100001011111001010100111",
             "11001110011101110011001001101110", "10100110000001111000000010000100", "00011001111110000101000010011110",
             "11101000111011111101100001010101", "01100001110110011001011100110101", "10101001011010011010011110101010",
             "11000101000011000000011011000010", "01011010000001001010101111111100", "10000000000010111100101011011100",
             "10011110010001000111101000101110", "11000011010001010011010010000100", "11111101110101010110011100000101",
             "00001110000111101001111011001001", "11011011011100111101101111010011", "00010000010101011000100011001101",
             "01100111010111111101101001111001", "11100011011001110100001101000000", "11000101110001000011010001100101",
             "01110001001111100011100011011000", "00111101001010001111100010011110", "11110001011011011111111100100000",
             "00010101001111100010000111100111", "10001111101100000011110101001010", "11100110111000111001111100101011",
             "11011011100000111010110111110111"],
            ["11101001001111010101101001101000", "10010100100000010100000011110111", "11110110010011000010011000011100",
             "10010100011010010010100100110100", "01000001000101010010000011110111", "01110110000000101101010011110111",
             "10111100111101000110101100101110", "11010100101000100000000001101000", "11010100000010000010010001110001",
             "00110011001000001111010001101010", "01000011101101111101010010110111", "01010000000000000110000110101111",
             "00011110001110011111011000101110", "10010111001001000100010101000110", "00010100001000010100111101110100",
             "10111111100010111000100001000000", "01001101100101011111110000011101", "10010110101101011001000110101111",
             "01110000111101001101110111010011", "01100110101000000010111101000101", "10111111101111000000100111101100",
             "00000011101111011001011110000101", "01111111101011000110110111010000", "00110001110010111000010100000100",
             "10010110111010110010011110110011", "01010101111111010011100101000001", "11011010001001010100011111100110",
             "10101011110010100000101010011010", "00101000010100000111100000100101", "01010011000001000010100111110100",
             "00001010001011001000011011011010", "11101001101101100110110111111011", "01101000110111000001010001100010",
             "11010111010010000110100100000000", "01101000000011101100000010100100", "00100111101000011000110111101110",
             "01001111001111111111111010100010", "11101000100001111010110110001100", "10110101100011001110000000000110",
             "01111010111101001101011010110110", "10101010110011100001111001111100", "11010011001101110101111111101100",
             "11001110011110001010001110011001", "01000000011010110010101001000010", "00100000111111101001111000110101",
             "11011001111100111000010110111001", "11101110001110011101011110101011", "00111011000100100100111010001011",
             "00011101110010011111101011110111", "01001011011011010001100001010110", "00100110101000110110011000110001",
             "11101010111000111001011110110010", "00111010011011101111101001110100", "11011101010110110100001100110010",
             "01101000010000011110011111110111", "11001010011110000010000011111011", "11111011000010101111010101001110",
             "11011000111111101011001110010111", "01000101010000000101011010101100", "10111010010010001001010100100111",
             "01010101010100110011101000111010", "00100000100000111000110110000111", "11111110011010111010100110110111",
             "11010000100101101001010101001011", "01010101101010000110011110111100", "10100001000101011001101001011000",
             "11001100101010010010100101100011", "10011001111000011101101100110011", "10100110001010100100101001010110",
             "00111111001100010010010111111001", "01011110111101000111111000011100", "10010000001010010011000101111100",
             "11111101111110001110100000000010", "00000100001001110010111101110000", "10000000101110110001010101011100",
             "00000101001010000010110011100011", "10010101110000010001010101001000", "11100100110001100110110100100010",
             "01001000110000010001001100111111", "11000111000011111000011011011100", "00000111111110011100100111101110",
             "01000001000001000001111100001111", "01000000010001110111100110100100", "01011101100010000110111000010111",
             "00110010010111110101000111101011", "11010101100110111100000011010001", "11110010101111001100000110001111",
             "01000001000100010011010101100100", "00100101011110110111100000110100", "01100000001010101001110001100000",
             "11011111111110001110100010100011", "00011111011000110110110000011011", "00001110000100101011010011000010",
             "00000010111000010011001010011110", "10101111011001100100111111010001", "11001010110100011000000100010101",
             "01101011001000111001010111100000", "00110011001111101001001011100001", "00111011001001000000101101100010",
             "11101110101111101011100100100010", "10000101101100101010001000001110", "11100110101110100000110110011001",
             "11011110011100100000110010001100", "00101101101000101111011100101000", "11010000000100100111100001000101",
             "10010101101101111001010011111101", "01100100011111010000100001100010", "11100111110011001111010111110000",
             "01010100010010011010001101101111", "10000111011111010100100011111010", "11000011100111011111110100100111",
             "11110011001111101000110100011110", "00001010010001110110001101000001", "10011001001011101111111101110100",
             "00111010011011110110111010101011", "11110100111110001111110100110111", "10101000000100101101110001100000",
             "10100001111010111101110111111000", "10011001000110111110000101001100", "11011011011011100110101100001101",
             "11000110011110110101010100010000", "01101101011001110010110000110111", "00100111011001011101010000111011",
             "11011100110100001110100000000100", "11110001001010010000110111000111", "11001100000000001111111110100011",
             "10110101001110010000111110010010", "01101001000011111110110100001011", "01100110011110111001111111111011",
             "11001110110110110111110110011100", "10100000100100011100111100001011", "11011001000101010101111010100011",
             "10111011000100110010111110001000", "01010001010110111010110100100100", "01111011100101000111100110111111",
             "01110110001110111101011011101011", "00110111001110010010111010110011", "11001100000100010101100101111001",
             "10000000001001101110001010010111", "11110100001011100011000100101101", "01101000010000101010110110100111",
             "11000110011010100010101100111011", "00010010011101010100110011001100", "01111000001011101111000100011100",
             "01101010000100100100001000110111", "10110111100100100101000111100111", "00000110101000011011101111100110",
             "01001011111110110110001101010000", "00011010011010110001000000011000", "00010001110010101110110111111010",
             "00111101001001011011110111011000", "11100010111000011100001111001001", "01000100010000100001011001011001",
             "00001010000100100001001110000110", "11011001000011001110110001101110", "11010101101010111110101000101010",
             "01100100101011110110011101001110", "11011010100001101010100001011111", "10111110101111111110100110001000",
             "01100100111001001100001111111110", "10011101101111001000000001010111", "11110000111101111100000010000110",
             "01100000011110000111101111111000", "01100000000000110110000001001101", "11010001111111011000001101000110",
             "11110110001110000001111110110000", "01110111010001011010111000000100", "11010111001101101111110011001100",
             "10000011010000100110101100110011", "11110000000111101010101101110001", "10110000100000000100000110000111",
             "00111100000000000101111001011111", "01110111101000000101011110111110", "10111101111010001010111000100100",
             "01010101010001100100001010011001", "10111111010110000010111001100001", "01001110010110001111010010001111",
             "11110010110111011111110110100010", "11110100011101001110111100111000", "10000111100010011011110111000010",
             "01010011011001101111100111000011", "11001000101100111000111001110100", "10110100011101011111001001010101",
             "01000110111111001101100110111001", "01111010111010110010011001100001", "10001011000111011101111110000100",
             "10000100011010100000111001111001", "10010001010111111001010111100010", "01000110011011100101100110001110",
             "00100000101101000101011101110000", "10001100110101010101010110010001", "11001001000000101101111001001100",
             "10111001000010111010110011100001", "10111011100000100000010111010000", "00010001101010000110001001001000",
             "01110101011101001010100110011110", "10110111011111110001100110110110", "11100000101010011101110000001001",
             "01100110001011010000100110100001", "11000100001100100100011000110011", "11101000010110100001111100000010",
             "00001001111100001011111010001100", "01001010100110011010000000100101", "00011101011011101111111000010000",
             "00011010101110010011110100011101", "00001011101001011010010011011111", "10100001100001101111001000001111",
             "00101000011010001111000101101001", "11011100101101111101101010000011", "01010111001110010000011011111110",
             "10100001111000101100111010011011", "01001111110011010111111101010010", "01010000000100010101111000000001",
             "10100111000001101000001111111010", "10100000000000101011010111000100", "00001101111001101101000000100111",
             "10011010111110001000110000100111", "01110111001111111000011001000001", "11000011011000000100110000000110",
             "01100001101010000000011010110101", "11110000000101110111101000101000", "11000000111101011000011011100000",
             "00000000011000000101100010101010", "00110000110111000111110101100010", "00010001111001101001111011010111",
             "00100011001110001110101001100011", "01010011110000101101110110010100", "11000010110000100001011000110100",
             "10111011110010111110111001010110", "10010000101111001011011011011110", "11101011111111000111110110100001",
             "11001110010110010001110101110110", "01101111000001011110010000001001", "01001011011111000000000110001000",
             "00111001011100100000101000111101", "01111100100100100111110000100100", "10000110111000110111001001011111",
             "01110010010011011001110110111001", "00011010110000010101101110110100", "11010011100111101011100011111100",
             "11101101010101000101010101111000", "00001000111111001010010110110101", "11011000001111010111110011010011",
             "01001101101011010000111111000100", "00011110010100001110111101011110", "10110001011000011110011011111000",
             "10100010100001010001010011011001", "01101100010100010001001100111100", "01101111110101011100011111100111",
             "01010110111000010100111011000100", "00110110001010101011111111001110", "11011101110001101100100000110111",
             "11010111100110100011001000110100", "10010010011000111000001000010010", "01100111000011101111101010001110",
             "01000000011000000000000011100000"],
            ["00111010001110011100111000110111", "11010011111110101111010111001111", "10101011110000100111011100110111",
             "01011010110001010010110100011011", "01011100101100000110011110011110", "01001111101000110011011101000010",
             "11010011100000100010011101000000", "10011001101111001001101110111110", "11010101000100011000111010011101",
             "10111111000011110111001100010101", "11010110001011010001110001111110", "11000111000000001100010001111011",
             "10110111100011000001101101101011", "00100001101000011001000001000101", "10110010011011101011000110111110",
             "01101010001101100110111010110100", "01010111010010001010101100101111", "10111100100101000110111001111001",
             "11000110101000110111011011010010", "01100101010010011100001011001000", "01010011000011111111100011101110",
             "01000110100011011101111001111101", "11010101011100110000101000011101", "01001100110100000100110111000110",
             "00101001001110011011101111011011", "10101001101110100100011001010000", "10101100100101010010011011101000",
             "10111110010111101110001100000100", "10100001111110101101010111110000", "01101010001011010101000110011010",
             "01100011111011111000110011100010", "10011010100001101110111000100010", "11000000100010011100001010111000",
             "01000011001001000010111011110110", "10100101000111100000001110101010", "10011100111100101101000010100100",
             "10000011110000000110000110111010", "10011011111010010110101001001101", "10001111111001010001010101010000",
             "10111010011001000101101111010110", "00101000001001101010001011111001", "10100111001110100011101011100001",
             "01001011101010011001010110000110", "11101111010101010110001011101001", "11000111001011111110111111010011",
             "11110111010100101111011111011010", "00111111000001000110111101101001", "01110111111110100000101001011001",
             "10000000111001001010100100010101", "10000111101100001000011000000001", "10011011000010011110011010101101",
             "00111011001111101110010110010011", "11101001100100001111110101011010", "10011110001101001101011110010111",
             "00101100111100001011011111011001", "00000010001010111000101101010001", "10010110110101011010110000111010",
             "00000001011111011010011001111101", "11010001110011110011111011010110", "01111100011111010010110100101000",
             "00011111100111110010010111001111", "10101101111100101011100010011011", "01011010110101101011010001110010",
             "01011010100010001111010101001100", "11100000001010011010110001110001", "11100000000110011010010111100110",
             "01000111101100001010110011111101", "11101101100100111111101010011011", "11101000110100111100010010001101",
             "00101000001110110101011111001100", "11111000110101010110011000101001", "01111001000100110010111000101000",
             "01111000010111110000000110010001", "11101101011101010110000001010101", "11110111100101100000111001000100",
             "11100011110100110101111010001100", "00010101000001010110110111010100", "10001000111101000110110110111010",
             "00000011101000010110000100100101", "00000101011001001111000010111101", "11000011111010111001111000010101",
             "00111100100100000101011110100010", "10010111001001110001101011101100", "10101001001110100000011100101010",
             "00011011001111110110110110011011", "00011110011000110010000111110101", "11110101100111000110011011111011",
             "00100110110111001111001100011001", "01110101001100111101100100101000", "10110001010101011111110111110101",
             "00000011010101100011010010000010", "10001010101110100011110010111011", "00101000010100010111011100010001",
             "11000010000010101101100111111000", "10101011110011000101000101100111", "11001100101011011001001001011111",
             "01001101111010000001011101010001", "00111000001100001101110010001110", "00110111100111010101100001100010",
             "10010011001000001111100110010001", "11101010011110101001000011000010", "11111011001111100111101111001110",
             "01010001001000011100111001100100", "01110111010011111011111000110010", "10101000101101101110001101111110",
             "11000011001010010011110101000110", "01001000110111100101001101101001", "01100100000100111110011010000000",
             "10100010101011100000100000010000", "11011101011011011011001000100100", "01101001100001010010110111111101",
             "00001001000001110010000101100110", "10110011100110100100011000001010", "01100100010001011100000011011101",
             "01011000011011001101111011001111", "00011100001000001100100010101110", "01011011101111101111011111011101",
             "00011011010110001000110101000000", "11001100110100100000000101111111", "01101011101101001110001110111011",
             "11011101101000100110101001111110", "00111010010110011111111101000101", "00111110001101010000101001000100",
             "10111100101101001100110111010101", "01110010111010101100111010101000", "11111010011001001000010010111011",
             "10001101011001100001001010101110", "10111111001111000110111101000111", "11010010100110111110010001100011",
             "01010100001011110101110110011110", "10101110110000100111011100011011", "11110110010011100110001101110000",
             "01110100000011100000110110001101", "11100111010110110001001101010111", "11111000011100100001011001110001",
             "10101111010100110111110101011101", "01000000010000001100101100001000", "01001110101101001110001011001100",
             "00110100110100100100011001101010", "00000001000101011010111110000100", "11100001101100000000010000101000",
             "10010101100110000011101000011101", "00000110101110001001111110110100", "11001110011011101010000001001000",
             "01101111001111110011101110000010", "00110101001000001010101110000010", "00000001000110100001110101001011",
             "00100111011100100010011111111000", "01100001000101010110000010110001", "11100111100100110011111111011100",
             "10111011001110100111100100101011", "00110100010001010010010110111101", "10100000100010000011100111100001",
             "01010001110011100111100101001011", "00101111001100101100100110110111", "10100000000111111011101011001001",
             "11100000000111001100100001111110", "10111100110001111101000111110110", "11001111000000010001000111000011",
             "10100001111010001010101011000111", "00011010100100001000011101001001", "11010100010011111011110110011010",
             "11010000110110101101111011001011", "11010101000010101101101000111000", "00000011001110011100001100101010",
             "11000110100100010011011001100111", "10001101111110010011000101111100", "11100000101100010010101101001111",
             "11110111100111100101100110110111", "01000011111101011011101100111010", "11110010110101010001100111111111",
             "00100111110110010100010110011100", "10111111100101110010001000101100", "00010101111001101111110000101010",
             "00001111100100011111110001110001", "10011011100101000001010100100101", "11111010111001011001001101100001",
             "11001110101101101001110011101011", "11000010101010000110010001011001", "00010010101110101010100011010001",
             "10110110110000010000011101011110", "11100011000001010110101000001100", "00010000110100100101000001100101",
             "11001011000000111010010001000010", "11100000111011000110111000001110", "00010110100110001101101100111011",
             "01001100100110001010000010111110", "00110010011110001110100101100100", "10011111000111111001010100110010",
             "11100000110100111001001011011111", "11010011101000000011010000101011", "10001001011100011111001000011110",
             "00011011000010100111010001000001", "01001011101000110011010010001100", "11000101101111100111000100100000",
             "11000011011101100011001011011000", "11011111001101011001111110001101", "10011011100110010010111100101110",
             "11100110000010110110111101000111", "00001111111000111111000100011101", "11100101010011001101101001010100",
             "00011110110110101101100010010001", "11001110011000100111100111001111", "11001101001111100111111001101111",
             "00010110000110001011000101100110", "11111101001011000001110100000101", "10000100100011111101001011000101",
             "11110110111110110010001010011001", "11110101001000111111001101010111", "10100110001100100111011000100011",
             "10010011101010000011010100110001", "01010110110011001100110100000010", "10101100111100001000000101100010",
             "01011010011101011110101110110101", "01101110000101100011011010010111", "10001000110100100111001111001100",
             "11011110100101100110001010010010", "10000001101110010100100111010000", "01001100010100001001000000011011",
             "01110001110001100101011000010100", "11100110110001101100011110111101", "00110010011110100001010000001010",
             "01000101111000011101000000000110", "11000011111100100111101110011010", "11001001101010100101001111111101",
             "01100010101010000000111100000000", "10111011001001011011111111100010", "00110101101111011101001011110110",
             "01110001000100100110100100000101", "10110010000001000000001000100010", "10110110110010111100111101111100",
             "11001101011101101001110000101011", "01010011000100010011111011000000", "00010110010000001110001111010011",
             "00111000101010111011110101100000", "00100101010001111010110111110000", "10111010001110000010000010011100",
             "11110111010001101100111001110110", "01110111101011111010000111000101", "00100000011101010110000001100000",
             "10000101110010111111111001001110", "10001010111010001000110111011000", "01111010101010101111100110110000",
             "01001100111110011010101001111110", "00011001010010001100001001011100", "00000010111110111000101010001100",
             "00000001110000110110101011100100", "11010110111010111110000111111001", "10010000110101001111100001101001",
             "10100110010111001101111010100000", "00111111000010010010010100101101", "11000010000010001110011010011111",
             "10110111010011100110000100110010", "11001110011101111110001001011011", "01010111100011111101111111100011",
             "00111010110000110111001011100110"]]

        self.key_gen(plainkey)

    @staticmethod
    def padxor(bit1, bit2, padlength):
        """

        :param bit1:  bit-string
        :param bit2:  bit-string
        :param padlength:  length of desired padding
        :return:
        """
        # bit-xor the two strings
        result = op.bitxor(bit1, bit2)
        while len(result) < padlength:
            # Pads the bits
            result = "0" + result

        return result

    def key_gen(self, plainkey):
        """

        :param plainkey: User defined key
        :return:
        """
        key = plainkey
        # ensures that the key wraps around based on the max amount of p-arrays.
        while len(key) < 72:
            key += key
        # takes the first 72 characters of the key
        key = key[:72]
        # changes the key into binary.
        key = op.stringtobin(key)
        # xors the p-array with the key
        for value in range(18):
            temp = key[value * 32: (value+1) * 32]
            self.p_array[value] = self.padxor(temp, self.p_array[value], 32)

        # encrypts an all zero string using the blowfish cipher
        currentencrypt = self.encrypt("0000000000000000000000000000000000000000000000000000000000000000", "bytes", "bytes")

        # error traps
        for icounter in range(len(self.p_array) // 2):
            if len(currentencrypt) > 64:
                print("Error in key gen p array")

            # if the encrypted string is less than 64 bits then it is padded
            while len(currentencrypt) < 64:
                currentencrypt = "0" + currentencrypt

            # splits the encrypted string into two halves.
            left = currentencrypt[:32]
            right = currentencrypt[32:]
            self.p_array[icounter * 2] = left
            self.p_array[icounter * 2 + 1] = right

            # encrypts the string again
            currentencrypt = self.encrypt(currentencrypt, "bytes", "bytes")

        # error traps the generating of sboxes
        for icounter in range(len(self.s_box)):
            for index in range(len(self.s_box[icounter]) // 2):
                if len(currentencrypt) > 64:
                    print("Error in key gen s box")
                # pads the string
                while len(currentencrypt) < 64:
                    currentencrypt = "0" + currentencrypt

                left = currentencrypt[:32]
                right = currentencrypt[32:]
                self.s_box[icounter][index * 2] = left
                self.s_box[icounter][index * 2 + 1] = right

                currentencrypt = self.encrypt(currentencrypt, "bytes", "bytes")

    @staticmethod
    def special_add(bit1, bit2):
        """

        :param bit1:  bit-string
        :param bit2:  bit-string
        :return:
        """
        #special add is simply modulo 32 addition
        newval = op.bitadd(bit1, bit2)
        newval = op.bintoint(newval)
        newval = newval % (2 ** 32)
        newval = op.inttobin(newval)
        return newval

    def f_function(self, bits):
        """

        :param bits: function input is in bits
        :return:
        """
        paddedbits = bits
        #pads the bits
        while len(paddedbits) < 32:
            paddedbits = "0" + paddedbits
        #initalize an array called byte
        byte = []
        # takes four bytes at a time and finds the sbox value
        for round in range(4):
            byte.append(paddedbits[round * 8: (round + 1) * 8])
            decval = op.bintoint(byte[round])
            byte[round] = self.s_box[round][decval]
        # runs the special add, then a padded xor, then another special add
        return self.special_add(self.padxor(self.special_add(byte[0], byte[1]), byte[2], 32), byte[3])

    def encrypt(self, plaintext, inputtype, outputtype):
        """

        :param plaintext: user inputted message
        :param inputtype: input type
        :param outputtype: output type
        :return:
        """
        emessage = ''
        # case input type for bytes
        if inputtype == "bytes":
            bintext = plaintext

        # case input type for string
        elif inputtype == "string":
            bintext = op.stringtobin(plaintext)
        # case input type for file
        elif inputtype == "file":
            temp = op.getbytearray(plaintext)
            bintext = ''
            for index in temp:
                bintext += index

        else:
            bintext = op.stringtobin(plaintext)
            print("Input Type Invalid. Choose 'string' 'file' 'bytes'. Defaulted to string")
        # pads the binary text to 64 bits
        while (len(bintext) % 64) != 0:
            bintext += '0'

        blocks = len(bintext) // 64
        #seperates the message into 64 bit blocks
        for times in range(blocks):
            current_message = bintext[64 * times: 64 * (times + 1)]

            # splits message into two halves
            lmessage = current_message[0: 32]
            rmessage = current_message[32: 64]

            # main feistel based cipher
            for round in range(16):
                lmessage = self.padxor(lmessage, self.p_array[round], 32)
                rmessage = self.padxor(self.f_function(lmessage), rmessage, 32)
                tmp = lmessage
                lmessage = rmessage
                rmessage = tmp

            temp = lmessage
            lmessage = rmessage
            rmessage = temp

            rmessage = self.padxor(rmessage, self.p_array[16], 32)
            lmessage = self.padxor(lmessage, self.p_array[17], 32)

            emessage += lmessage + rmessage

        # output formatting
        if outputtype == "hex":
            emessage = op.bintohex(emessage)
            while len(emessage) % 16 != 0:
                emessage = "0" + emessage

        elif outputtype == "bytes":
            pass
        elif outputtype == "string":
            emessage = op.bintostring(emessage)
        else:
            print("Invalid Output Type. Either bytes or hex. defaulted to bytes")

        return emessage

    def decrypt(self, ciphertext, inputtype, outputtype):
        """

        :param plaintext: encrypted text
        :param inputtype: input type
        :param outputtype: output type
        :return:
        """
        dmessage = ''
        # input type formatting
        if inputtype == "bytes":
            bintext = ciphertext

        elif inputtype == "hex":
            bintext = op.hextobin(ciphertext)

        elif inputtype == "string":
            bintext = op.stringtobin(ciphertext)

        elif inputtype == "file":
            temp = op.getbytearray(ciphertext)
            bintext = ''
            for index in temp:
                bintext += index

        else:
            bintext = op.stringtobin(ciphertext)
            print("Input Type for decryption Invalid. Defaulted to string. 'hex' 'string' 'bytes'.")

        while (len(bintext) % 64) != 0:
            bintext += '0'

        blocks = len(bintext) // 64

        for times in range(blocks):
            current_message = bintext[64 * times: 64 * (times + 1)]

            lmessage = current_message[0: 32]
            rmessage = current_message[32: 64]

            # difference from encryption is here, where the order or p_array use is switched
            for round in range(16):
                lmessage = self.padxor(lmessage, self.p_array[len(self.p_array) - round - 1], 32)
                rmessage = self.padxor(self.f_function(lmessage), rmessage, 32)
                tmp = lmessage
                lmessage = rmessage
                rmessage = tmp

            temp = lmessage
            lmessage = rmessage
            rmessage = temp

            rmessage = self.padxor(rmessage, self.p_array[1], 32)
            lmessage = self.padxor(lmessage, self.p_array[0], 32)

            dmessage += lmessage + rmessage

        # output type formatting
        if outputtype == "string":
            dmessage = op.bintostring(dmessage)

        elif outputtype == "bytes":
            pass
        else:
            print("Invalid Output Type. Either bytes or hex. defaulted to bytes")

        return dmessage

    def communicate(self, sender=False, IP='0.0.0.0'):
        """
        This is the method to call when the user wants to communicate between 2 computers
        :param sender: If this computer sends first, set this value to True
        :param IP: If sender is True, then the IP of the receiving computer must be inserted here
        """
        global socketHolder
        if sender:
            socketHolder.connect((IP, 54321))
            print("connected")
        else:
            socketHolder.bind(('0.0.0.0', 54321))
            socketHolder.listen()
            connection, address = socketHolder.accept()
            socketHolder = connection

        a = threading.Thread(target=self.sends)
        b = threading.Thread(target=self.recv)
        a.start()
        b.start()

    def sends(self):
        global socketHolder  # call variable as global
        while True:
            msg = input("")  # placeholder for a way fof getting input
            msg = self.encrypt(msg, "string", "string")
            socketHolder.send(msg.encode(encoding='utf-8', errors='ignore'))  # sends input(add your encryption here)

    def recv(self):
        global socketHolder  # call variable as global
        while True:
            data = socketHolder.recv(4096).decode(encoding='utf-8', errors='strict')  # recieves data from connection
            print(self.decrypt(data, "string", "string"))


class MyOTP:
    def __init__(self, key=None, keytype=None):
        self.pad = []

        if key is None:
            if keytype == "file":  # formats the key type to file type
                newfilename = "pad.txt"  # sets file name

                f = open(newfilename, "w+")  # creates a new file with the given file name
                for i in range(120000000):  # prints the contents of the text file
                    f.write(str(random.randint(0, 255)))  # creates a random number
                    f.write(" ")

                f.close()  # closes the instance of the file

                with open(newfilename) as otp:  # sets the file name to a easy to use name
                    readotp = csv.reader(otp, delimiter=" ")  # reads the contents of the text and accounts for quotes or spaces
                    for row in readotp:  # this loop will run for every number in the text file
                        for i in range(len(row)):  # this loop will run for the number that the first loop is currently in
                            self.pad.append(int(row[i]))  # this appends the value of the loop, to a new list called pad

            elif keytype == "string":
                for i in range(16):  # case for string type
                    self.pad.append(random.randint(0, 255))

            elif keytype is None:
                print("Key type defaulted to string")  # case for default
                for i in range(16):
                    self.pad.append(random.randint(0, 255))

            else:
                print("Key Type Invalid. Defaulted to generating a string key")  # case for default
                for i in range(16):
                    self.pad.append(random.randint(0, 255))

        else:
            if keytype is None:  # type defaulted to string
                print("Key Type defaulted to string.")
                for letter in key:
                    self.pad.append(ord(letter))

            elif keytype == "string":  # case for type string
                for letter in key:
                    self.pad.append(ord(letter))

            elif keytype == "file":
                with open(key) as otp:  # sets the file name to a easy to use name
                    readotp = csv.reader(otp, delimiter=" ")  # reads the contents of the text and accounts for quotes or spaces
                    for row in readotp:  # this loop will run for every number in the text file
                        for i in range(len(row)):  # this loop will run for the number that the first loop is currently in
                            self.pad.append(int(row[i]))  # this appends the value of the loop, to a new list called pad

            else:
                print("Key Type is invalid. Defaulted to string.")  # case for default
                for letter in key:
                    self.pad.append(ord(letter))

    def encrypt(self, plaintext):
        """

        :param plaintext: requires a plaintext from the user
        :return: returns the encrypted message
        """
        encryptedmessage = ''

        if len(self.pad) < len(plaintext):  # this pads the pad with zeros, in order to be able to XOR with the plaintext
            while len(self.pad) < len(plaintext):
                self.pad.append(0)

        for icounter in range(len(plaintext)):  # XORS all the values in the plaintext with the pad
            encryptedmessage += chr(ord(plaintext[icounter]) ^ self.pad[icounter])

        return encryptedmessage  # returns the character of the XOR-ed value.

    def decrypt(self, ciphertext):
        """

        :param ciphertext: This parameter requires ciphered text encrypted by the encrypt function
        :return: returns the decrypted message
        """
        return self.encrypt(ciphertext)

    def communicate(self, sender=False, IP='0.0.0.0'):
        """
        This is the method to call when the user wants to communicate between 2 computers
        :param sender: If this computer sends first, set this value to True
        :param IP: If sender is True, then the IP of the receiving computer must be inserted here
        """
        global socketHolder
        if sender:
            socketHolder.connect((IP, 54321))
            print("connected")
        else:
            socketHolder.bind(('0.0.0.0', 54321))
            socketHolder.listen()
            connection, address = socketHolder.accept()
            socketHolder = connection

        a = threading.Thread(target=self.sends)
        b = threading.Thread(target=self.recv)
        a.start()
        b.start()

    def sends(self):
        global socketHolder  # call variable as global
        while True:
            msg = input("")  # placeholder for a way fof getting input
            msg = self.encrypt(msg)
            socketHolder.send(msg.encode(encoding='utf-8', errors='ignore'))  # sends input(add your encryption here)

    def recv(self):
        global socketHolder  # call variable as global
        while True:
            data = socketHolder.recv(4096).decode(encoding='utf-8', errors='strict')  # recieves data from connection
            print(self.decrypt(data))


